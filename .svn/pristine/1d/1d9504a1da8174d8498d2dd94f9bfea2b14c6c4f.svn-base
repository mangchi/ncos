<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
	  xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	  layout:decorate="~{th/cmmn/layout}">
<head>
<title>함내 자산위치 전시</title>
<script type="text/javascript" th:src="@{/js/labeling.js}" ></script>
</head>
<th:block layout:fragment="content">
<div class="container-wide">
	<div class="container">
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_10_01"></span><strong>함내 자산위치 전시</strong>
					<a href="#assetdisplay" class="iconWrapB setting icon_setting setBtn">설정</a></h4>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner"> 
					<div class="canvasWrapMain" style=" width: 1783px; height: 456px;">
	                <canvas id="imgLayerMain" class="labelingImg" style="z-index: 10; position: absolute; width: 1783px; height: 456px;"></canvas>
	                <canvas id="drawLayerMain" style="z-index: 11; position: absolute; width: 1783px; height: 456px;" > </canvas>    
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<div class="btnWrap" style="padding: 10px">
						<div class="left"> 
						</div>
						<div class="right">
							<a href="javascript:;" class="btn medium darkblue active icon_select2"><span class="iconBtn icon_select2"></span><strong>전시 초기화</strong></a>
							<a href="javascript:;" class="btn medium darkblue icon_enlargement2"><span class="iconBtn icon_enlargement2"></span><strong>확대</strong></a>
							<a href="javascript:;" class="btn medium darkblue icon_reduction2"><span class="iconBtn icon_reduction2"></span><strong>축소</strong></a> 
							<a href="javascript:;" class="btn medium darkblue icon_movement2"><span class="iconBtn icon_movement2"></span><strong>이동</strong></a> 
							<a href="javascript:;" class="btn medium darkblue initBtn"><span class="iconBtn icon_reset"></span><strong>초기화</strong></a>
							<a href="javascript:;" class="btn medium darkblue pauseBtn"><span class="iconBtn icon_btn_08"></span><strong>일시정지</strong></a> 
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_10_02"></span><strong>위협 발생 및 자산 이상 상태 목록</strong></h4>
					<div class="items"> 
						<!--table//-->
						<div class="tablewrap">
							<table>
								<thead class="tHead">
								</thead>
								<tbody class="tBody">
								</tbody>
							</table>
						</div>
						<div class="page_wrap">
							<div class="page_nation">
								<input type="hidden" name="rowPerPage" class="rowPerPage" value="4">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<!--//Grid--> 
	</div>
</div>
<!--함내 자산위치 전시 설정 modal popup//-->
<div class="dim-layer">
	<div class="dimBg"></div>
	<div id="assetdisplay" class="pop-layer xxxxlarge"> 
		<!--Title-->
		<div class="Popup-title">
			<h3><strong>함내 자산위치 설정</strong></h3>
			<button class="icon-close">닫기</button>
		</div>
		<div class="Popup-container"> 
			<div class="grid-row" style="min-width: auto">
				<div class="item-box col-8">
					<div class="inner">
<!--						<h4 class="item-title"><span class="iconWrapB icon_02_02"></span><strong>네트워크 장비 구역별 목록</strong></h4>-->
						<div class="items"> 
							<!-- item contnets // -->
							<div class="settingBtn">
								<ul class="clfix">
									<li class="selectImg"><a href="javascript:;" title="선택" class="active"><span class="iconSetting icon_select">선택</span></a></li>
									<li class="enlargement"><a href="javascript:;" title="확대" ><span class="iconSetting icon_enlargement">확대</span></a></li>
									<li class="reduction"><a href="javascript:;" title="축소"><span class="iconSetting icon_reduction">축소</span></a></li>
									<li class="movement"><a href="javascript:;" title="이동"><span class="iconSetting icon_movement">이동</span></a></li>
									<li class="addition"><a href="javascript:;" title="추가"><span class="iconSetting icon_addition">추가</span></a></li>
									<li class="delete"><a href="javascript:;" title="삭제"><span class="iconSetting icon_delete">삭제</span></a></li>
									<li class="correction"><a href="javascript:;" title="수정"><span class="iconSetting icon_correction">수정</span></a></li>
									
								</ul>
							</div>
							
							<div class="canvasWrap" style=" width: 1006px; height: 450px;">
	                        <canvas id="imgLayer" class="labelingImg" style="z-index: 20; position: absolute; width: 1006px; height: 450px;" draggable="true"></canvas>
	                        <canvas id="drawLayer" style="z-index: 21; position: absolute; width: 1006px; height: 450px;" draggable="true"> </canvas> 
							</div>
						</div>
					</div>
				</div>
				<div class="item-box col-4">
					<div class="inner">
<!--						<h4 class="item-title"><span class="iconWrapB icon_02_02"></span><strong>네트워크 장비 계위 목록</strong></h4>-->
						<div class="items"> 
							<div class="tablewrap">
								<table>
									<colgroup>
										<col style="width: 100px">
										<col>
										<col>
										<col>
										<col>
									</colgroup>
									<thead class="tHead">
									</thead>
									<tbody class="tBody">
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="Popup-footer">
			<div class="btnWrap">
				<div class="left"> 
				</div>
				<div class="right">
					<a href="javascript:;" class="btn medium darkblue saveBtn"><span class="iconBtn icon_btn_07"></span><strong>저장</strong></a>
					<a href="javascript:;" class="btn medium darkblue deleteBtn"><span class="iconBtn icon_btn_04"></span><strong>삭제</strong></a> 
					<a href="javascript:;" class="btn medium darkblue cancelBtn"><span class="iconBtn icon_btn_08"></span><strong>닫기</strong></a> 
				</div>
			</div>
		</div>
	</div>
</div>

<div id="assetList" class="pop-layer ssmall" style="z-index:13;"> 
	<div class="Popup-title">
		<h3><span></span><strong></strong></h3>
		<button class="icon-close">닫기</button>
	</div>
	<div class="Popup-container" style="padding: 5px;overflow-y:auto; height:300px;"> 
		<div class="Popup-contents">
			<ul class="warshipWrap clfix">
			</ul>
		</div>
	</div>
</div>
<div id="assetInfo" class="pop-layer ssssmall" style="z-index:14; "> 
	<div class="Popup-title" >
		<h3><span></span><strong></strong></h3>
		<button class="icon-close">닫기</button>
	</div>
	<div class="Popup-container" style="padding: 5px;overflow-y:auto; height:60px;"> 
		<div class="Popup-contents">
			<ul class="warshipWrap clfix">
			</ul>
		</div>
	</div>
</div>
<!--//modal popup--> 
<script th:inline="javascript"> 
	window.addEventListener('DOMContentLoaded', () => {
		ncos.schMode = 'auto';
		labelInit();
		let item = {"fileNm":"장보고함","filePath":"/img/@img_051.png"};
	    drawImg(item);
		init();
		
		ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//50초
		document.querySelector('.initBtn').addEventListener('click',e => {
	    	e.preventDefault();
	    	ncos.initBtn = true;
			searchFunc();
			ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//50초
	    });	  
		document.querySelector('.pauseBtn').addEventListener('click',e => {
	    	e.preventDefault();
	    	clearInterval(ncos.intervalFunc);
	    });	      
		
	});

    const init = () => {
       	const headColumns = [{data_id:"id",width: "0px"}
					        ,{data_id:"detectionTime",label:"시간",data_dateFrmt:"yy-mm-dd hh:mi:ss"}
					        ,{data_id:"eventTp",label:"이벤트유형" }
					        ,{data_id:"impNm",label: "위협중요도", data_grpCd:"IMP",data_class:"threat"}
					        ,{data_id:"detailInfo",label:"세부정보"}
					        ,{data_id:"detailBtn",label:"상세보기",data_btnNm:"상세보기" }
					        ];
        gridInit(document.querySelector('.tablewrap'),headColumns);
		pageInit(document.querySelector(".page_nation"),searchFunc,page.rowPerPage);
		
		const labelParentBtn = document.querySelector('.container-wide').querySelector('.right');
		if(labelParentBtn){
			console.log("parent.......");
			labelParentBtn.querySelector('.icon_select2').addEventListener('click',selectParentImg,false);
			labelParentBtn.querySelector('.icon_enlargement2').addEventListener('click',zoominParentImg,false);  //
		    labelParentBtn.querySelector('.icon_movement2').addEventListener('click',moveParentImg,false);
		    labelParentBtn.querySelector('.icon_reduction2').addEventListener('click',zoomoutParentImg,false);
		}
		searchFunc();
    }
    
    const searchFunc = (invoker) => {
    	pageSearch("/getAssetDispoList",document.querySelector(".tablewrap"),document.querySelector(".page_nation"),invoker,searchFunc,searchAfterFunc );
    }
    
    const searchAfterFunc = (appendData) => {
        //console.log("appendData:",appendData);
        labelingMain.arRectangle = new Array();
        let assetZoneGroup = appendData.assetZoneGroup;
        let assetZoneList = appendData.assetZoneList;        
        for(let idx in assetZoneGroup){
        	idx = parseInt(idx);
			let itm = assetZoneGroup[idx];
			if(itm != null){
				let color = redColor;
				if(itm.isProblem == '0'){
					color = greenColor;
				}
				
	       		let rect = new Rectangle(parseFloat(itm.startX), parseFloat(itm.startY), parseFloat(itm.endX),parseFloat(itm.endY),color,idx,itm.zoneId,itm.zoneName); 
	       		labelTarget = 'main';
				labelingMain.arRectangle.push(rect);
	       	}
			 
	    }
        assetArray = new Array();
        for(let idx in assetZoneList){
        	let itm = assetZoneList[idx];
        	if(itm != null){
        		assetArray.push(itm);
        	}
        }
        //let item = {"fileNm":"장보고함","filePath":"/img/@img_051.png"}
        drawDbRect();
		//drawImg(item,drawDbRect);
    } 

    
    detailFunc = (data) => {
    	if(data.eventTp === '위협탐지'){
    		pageFunc('/threatDisp');
    	}
    	else{
    		pageFunc('/assetDisp');
    	}
 	  
    }
    
    document.querySelector('.setBtn').addEventListener('click',(e) => {
    	e.preventDefault();
    	let sessionTime = gfn_getStorageItem('sessionTm',false);
		if(gfn_nullValue(sessionTime) != '' && sessionTime > -1){
			clearInterval(loginInterval);
			setTimer(sessionTime);
		}
        labeling.arRectangle = new Array();
        changeOn(document.querySelector('.icon_select'));
    	const headColumns = [{data_id:"id",width: "0px"}
					        ,{data_id:"zoneName",label:"구역명",data_type:"input" }
					        ,{data_id:"startX",label:"시작위치X",data_type:"int" }
					        ,{data_id:"startY",label:"시작위치Y",data_type:"int"}
					        ,{data_id:"endX",label:"종료위치X",data_type:"int"}
					        ,{data_id:"endY",label:"종료위치Y",data_type:"int"}
					      	,{data_id:"delYn",width: "0px"}				        
					        ];
		gridInit(document.querySelector('#assetdisplay').querySelector('.tablewrap'),headColumns);
		
    	
    	const labelBtn = document.querySelector('.clfix');
		if(labelBtn){
			labelBtn.querySelector('.selectImg').addEventListener('click',selectImg,false);
		    labelBtn.querySelector('.movement').addEventListener('click',moveImg,false);
		    labelBtn.querySelector('.enlargement').addEventListener('click',zoominImg,false);
		    labelBtn.querySelector('.addition').addEventListener('click',drawRect,false);
		    labelBtn.querySelector('.reduction').addEventListener('click',zoomoutImg,false);
		    labelBtn.querySelector('.correction').addEventListener('click',editRect,false);
		    labelBtn.querySelector('.delete').addEventListener('click',deleteRect,false);
		}
    	let href = e.target.getAttribute('href');
    	
    	gfn_asyncJsonCall('/getZoneLocationList','GET').then((data) => {
	 		let list = data['list'];
	 		gridBind(list,document.getElementById('assetdisplay').querySelector('.tablewrap'));
	 		return list;
	 	}).then((list) => {
	 		layerPopup(href);
	 		let item = {"fileNm":"장보고함","filePath":"/img/@img_051.png"};
	 		let trs = document.getElementById('assetdisplay').querySelector('.tBody').querySelectorAll('tr');
	 		for(let idx in list){
				 idx = parseInt(idx);
				 let itm = list[idx];
				 console.log("itm:",itm);
				 let color = otherColor;
	        	 if(idx === 0){
	        		color = choosedColor; 
	        	 }
				 let rect = new Rectangle(parseFloat(itm.startX), parseFloat(itm.startY), parseFloat(itm.endX),parseFloat(itm.endY),color,idx,itm.id,itm.zoneName,itm.delYn);
				 trs[idx].setAttribute("data-value",idx);
				 labeling.arRectangle.push(rect);
		    }
	 		labelTarget = 'modal';
	 		drawImg(item,drawDbRect);
	 		if(list.length > 0) trs[0].classList.add('trSelect');
	 	}); 
    	
    });
	
	document.getElementById('assetdisplay').querySelector('.saveBtn').addEventListener('click',(e) => {
		e.preventDefault();
		let gridComp = document.getElementById('assetdisplay').querySelector('.tablewrap');
		let jsonParam = {};
		let rowDatas = new Array();
		let trs = gridComp.querySelector('.tBody').querySelectorAll('tr');
		let thCols = gridComp.querySelector('.tHead').querySelectorAll("th");
		let valid = true;
		if(trs.length === 0) valid = false;
		trs.forEach((tr) => {
			let rowData = {};
			const tds = tr.querySelectorAll('td');
			tds.forEach((td,i) => {
				let tdVal = '';
				if(i === 1){
					console.log("td:",td);
					let inputs = td.childNodes;
					console.log("inputs:",inputs);
					tdVal = inputs[0].value;
					console.log("tdVal:",tdVal);
					if(tdVal == undefined || tdVal == ''){
						valid = false;
						inputs[0].style.borderColor = 'red'; 
						//return ;
					}
					
					else{
						inputs[0].style.borderColor = 'white'; 
					}
					
				}
				else{
					tdVal = td.getAttribute("data-value");
				}
				
				rowData[td.getAttribute("data-id")] = tdVal;

			});
			rowDatas.push(rowData);
		});
		jsonParam["list"] = rowDatas;
		if(valid){
			gfn_asyncTranDataCall('/saveZoneLocation','POST',jsonParam,trncZoneLocationAfterFunc,true);
		}

	});
	
	const trncZoneLocationAfterFunc = () => {
		labelingMain.arRectangle = new Array();
		let trs = document.getElementById('assetdisplay').querySelector('.tBody').querySelectorAll('tr');
		if(trs.length > 0){
			selectZoneName(trs[0]);
		}
		searchFunc();
		document.getElementById('assetdisplay').querySelector('.icon-close').click();
		//document.querySelector('.setBtn').click();
	}


	
	document.getElementById('assetdisplay').querySelector('.deleteBtn').addEventListener('click',(e) => {
		e.preventDefault();
		let trs = document.getElementById('assetdisplay').querySelector('.tBody').querySelectorAll('tr');
		trs.forEach((tr) => {
			if(tr.classList.contains('trSelect')){
				let isValid = true;
				let tds = tr.querySelectorAll('td');
				tds.forEach((td) => {
					if(td.getAttribute('data-id') === 'delYn' && gfn_nullValue(td.getAttribute('data-value')) != 'Y'){
						isValid = false;
						return;
					}
				});
				if(isValid){
					removeObject(tr);
				}
				else{
					msgCall(msg.invalidDelZone,false,false);
				}
				
				
			}
		});

	});
	
	document.getElementById('assetdisplay').querySelector('.cancelBtn').addEventListener('click',(e) => {
		e.preventDefault();
		document.getElementById('assetdisplay').querySelector('.icon-close').click();
	});
	
	document.querySelector('.canvasWrapMain').addEventListener('mousemove',(e) => {
		e.preventDefault();
	
		var clickX = canvasX(e.clientX)/labelingMain.scaleX;
        var clickY = canvasY(e.clientY)/labelingMain.scaleY;
       
        labelingMain.rectIndex = getRectangle(clickX,clickY);
        let canvasWrapMain = document.querySelector('.canvasWrapMain');
        if(labelingMain.rectIndex > -1){
        	canvasWrapMain.style.cssText = '';
        	canvasWrapMain.style.cssText = labelingMain.cssTxt + 'cursor:pointer;';
        }
        else{
        	canvasWrapMain.style.cssText = '';
        	canvasWrapMain.style.cssText = labelingMain.cssTxt + 'cursor:default;';
        }
        
        
        let imgCtx = document.getElementById('imgLayerMain').getContext('2d');
    	let drawCtx = document.getElementById('drawLayerMain').getContext('2d');
    	//drawCtx.strokeStyle = "black";
    	//drawCtx.lineWidth = labelingMain.lineWidth;

        labelingMain.ex = canvasX(e.clientX)/labelingMain.scaleX - labelingMain.layerX/labelingMain.scaleX;
        labelingMain.ey = canvasY(e.clientY)/labelingMain.scaleY - labelingMain.layerY/labelingMain.scaleY;
        
        if(labelingMain.sx < 0 || labelingMain.sx > 1783){
        	return false;
        }
        if(labelingMain.sy < 0 || labelingMain.sy > 456){
          	return false;
        }
        if(labelingMain.ex < 0 || labelingMain.ex > 1783){
        	return false;
        }
        if(labelingMain.ey < 0 || labelingMain.ey > 456){
          	return false;
        }
        if(labelingMain.mode === 'move' && labelingMain.active){
		
			labelingMain.currentX = canvasX(e.clientX)/labelingMain.scaleX ;
			labelingMain.currentY = canvasY(e.clientY)/labelingMain.scaleY;
			labelingMain.layerX += labelingMain.currentX-labelingMain.initialX;
			labelingMain.layerY += labelingMain.currentY-labelingMain.initialY;   
			labelingMain.initialX = labelingMain.currentX;
	        labelingMain.initialY = labelingMain.currentY;       		        
            imgCtx.clearRect(0,0, labelingMain.img.width/labelingMain.scaleX, labelingMain.img.height/labelingMain.scaleY);
            imgCtx.drawImage(labelingMain.img,labelingMain.layerX,labelingMain.layerY,labelingMain.img.width,labelingMain.img.height);
            drawRectsNormal();
         
		}
	});
	
	document.querySelector('.canvasWrapMain').addEventListener('click',(e) => {
		e.preventDefault();
		labelTarget = 'main';
		let clickX = canvasX(e.clientX)/labelingMain.scaleX;
        let clickY = canvasY(e.clientY)/labelingMain.scaleY;
        console.log("clickX:::",clickX,", clickY:::",clickY);
        let canvas = document.querySelector('#drawLayerMain');
        let bound = canvas.getBoundingClientRect();
        console.log("left:",bound.left,",top:",bound.top);
        
        console.log("e.clientX:",e.clientX);
        console.log("e.clientY:",e.clientY);
        
        console.log("labelingMain.layerX:",labelingMain.layerX,"labelingMain.scalX:::",labelingMain.scaleX);
        console.log("labelingMain.layerY:",labelingMain.layerY,"labelingMain.scaleY:::",labelingMain.scaleY);
        if(labelingMain.layerX > 0){
			clickX = canvasX(e.clientX-parseInt(labelingMain.layerX))/labelingMain.scaleX;
		}
		else if(labelingMain.layerX < 0){
			clickX = canvasX(e.clientX-(labelingMain.layerX))/labelingMain.scaleX;
		}
		
		if(labelingMain.layerY > 0){
			clickY = canvasY(e.clientY-parseInt(labelingMain.layerY))/labelingMain.scaleY;
		}
		else if(labelingMain.layerY < 0){
			clickY = canvasY(e.clientY-(labelingMain.layerY))/labelingMain.scaleY;
		}
		console.log("clickX:",clickX,", clickY:",clickY);
        labelingMain.rectIndex = getRectangle(clickX,clickY);
        console.log("labelingMain.rectIndex:",labelingMain.rectIndex);
        
        if(labelingMain.rectIndex > -1){
        	let zoneId = '';
        	let zoneName = '';
        	for(let i=0;i<labelingMain.arRectangle.length;i++){
        		let r = labelingMain.arRectangle[i];
        		//console.log("r:",r);
        		if(r.objIdx == labelingMain.rectIndex ) {
        		   zoneId = r.zoneId;
        		   zoneName = r.zoneName;
        		}
        	}
        	if(document.getElementById('assetList').style.display === 'block'){
				document.getElementById('assetList').style.display = '';
			}
        	let popTitle = document.querySelector('#assetList').querySelector('strong');
         	
         	let ul = document.querySelector('#assetList').querySelector('.warshipWrap');
         	ul.innerHTML = '';
         	let existAsset = false;
         	if(assetArray.length > 0){
         		assetArray.forEach((asset,index) => {
         		    console.log("asset:",asset);
         			if(asset.zoneId == zoneId){
         			    popTitle.textContent = zoneName;
         				existAsset = true;
         				let anch = document.createElement('a');      				
         				let li = document.createElement('li');
         				li.setAttribute("style","width:20%;");
           			    let span = document.createElement('span');
           			    let detailInfo = gfn_nullValue(asset.reasonName) +','+ gfn_nullValue(asset.sDetectionThreatName) +','+ gfn_nullValue(asset.dDetectionThreatName);
        			    span.classList.add('iconWrapShip');
           			    span.setAttribute("style","cursor:pointer");
        			    let sGrade = asset.sGrade == null ? 0: parseInt(asset.sGrade);
						let dGrade = asset.dGrade == null ? 0: parseInt(asset.dGrade);
						let imgType = 'server';
						if(asset.largeCategory == '2'){
							imgType = 'terminal';
						}
						else if(asset.largeCategory == '3'){
							imgType = 'network';
						}
						else if(asset.largeCategory == '4'){
							imgType = 'security';
						}
							
						
						if(asset.isProblem == 'N'){
    			    		span.classList.add('assetInfo_'+imgType+'00');
    			    	}
    			    	else{
							
							if(asset.aGrade == null){ // && asset.sGrade && asset.dGrade){
								
								if(sGrade > dGrade){
									span.classList.add('assetInfo_'+imgType+'0'+sGrade);
								}
								else{
									span.classList.add('assetInfo_'+imgType+'0'+dGrade);
								}
							}
							else{
								if(sGrade > dGrade){
									span.classList.add('assetInfo_'+imgType+'1'+sGrade);
								}
								else if(dGrade > sGrade){
									span.classList.add('assetInfo_'+imgType+'1'+dGrade);
								}
								else if(sGrade == 0 && dGrade == 0){
									span.classList.add('assetInfo_'+imgType+'10');
								}
								else{
									span.classList.add('assetInfo_'+imgType+'1'+sGrade);
								}
							}
    			    	}
     				    anch.addEventListener('click',e=>{
							 e.preventDefault();
     				    	 showAssetInfo(asset.assetName,detailInfo,e.clientX,e.clientY);
     				    });
     				    anch.appendChild(li);
           			    li.appendChild(span);
        			    ul.appendChild(anch);
         			}
         			
         		});
         		
         	}
         	if(existAsset){
         		showLayer('#assetList',e.clientX,e.clientY);
         		
         	}
         	
        }
        else{
        	if(labelingMain.mode === 'zoomin' || labelingMain.mode === 'zoomout'){
				let isAct = true;
        		if(labelingMain.mode === 'zoomin'){
					/*
    	    		if(labelingMain.scaleX.toFixed(1) ==  1.5){
    	    			labelingMain.mode = 'zoomout';
    	    			changeParentOn(document.querySelector('.icon_reduction2'));
    	            	document.querySelector('.canvasWrapMain').style.cssText = '';
    	    			document.querySelector('.canvasWrapMain').style.cssText = labelingMain.cssTxt+'cursor:zoom-out;';
    	    			labelingMain.scaleX -= 0.1;
    	    			labelingMain.scaleY -= 0.1;
    	        	}
    	    		else{
    	    			labelingMain.scaleX += 0.1;
    	    			labelingMain.scaleY += 0.1;
    	    		}
    	    		*/
    	    		if(labelingMain.scaleX.toFixed(1) >  1.5){
						isAct = false;
					}
					else{
						labelingMain.scaleX += 0.1;
    	    			labelingMain.scaleY += 0.1;
					}
    	        	
    	    	}
    	    	else if(labelingMain.mode === 'zoomout'){
					/*
    	    		if(labelingMain.scaleX.toFixed(1) ==  0.5){
    	    			labelingMain.mode = 'zoomin';
    	    			
    	    			changeParentOn(document.querySelector('.icon_enlargement2'));
    	    			document.querySelector('.canvasWrapMain').style.cssText = '';
    	    			document.querySelector('.canvasWrapMain').style.cssText = labelingMain.cssTxt+'cursor:zoom-in;';
    	    			labelingMain.scaleX += 0.1;
    	    			labelingMain.scaleY += 0.1;
    	        	}
    	    		else{
    	    			labelingMain.scaleX -= 0.1;
    	    			labelingMain.scaleY -= 0.1;
    	    		}	
    	    		*/
    	    		if(labelingMain.scaleX.toFixed(1) < 0.5){
						isAct = false;
					}
					else{
						labelingMain.scaleX -= 0.1;
    	    			labelingMain.scaleY -= 0.1;
					}
    	    	}
    	    	if(isAct){
					let imgCvs = document.getElementById('imgLayerMain');
	    	    	let imgCtx = imgCvs.getContext('2d');	
	    	    	// 좌표 정규화해서 새로운 도형을 배열에 추가
	    	    	imgCvs.width = labelingMain.img.width;
	    	    	imgCvs.height = labelingMain.img.height;
	    	    	imgCtx.scale(labelingMain.scaleX,labelingMain.scaleY);
	    	    	imgCtx.clearRect(0,0, imgCvs.width, imgCvs.height);
	    	    	labelingMain.layerX = labelingMain.layerX*labelingMain.scaleX;
	    	    	labelingMain.layerY = labelingMain.layerY*labelingMain.scaleY;
	
	    	    	imgCtx.clearRect(labelingMain.layerX,labelingMain.layerY, labelingMain.img.width/labelingMain.scaleX, labelingMain.img.height/labelingMain.scaleY);
	    	       	imgCtx.drawImage(labelingMain.img,labelingMain.layerX,labelingMain.layerY,labelingMain.img.width,labelingMain.img.height);
	    	       	drawRectsNormal();
				}
    	    	
        	}
        	clickX = canvasX(e.clientX)/labelingMain.scaleX;
            clickY = canvasY(e.clientY)/labelingMain.scaleY;
        	
        }
	});
	
	const showAssetInfo = (name,detailInfo,x,y) =>{
		console.log("showAssetInfo detailInfo:",detailInfo);
		let popTitle = document.querySelector('#assetInfo').querySelector('strong');
     	popTitle.textContent = '자산 정보';
     	let ul = document.querySelector('#assetInfo').querySelector('.warshipWrap');
     	ul.innerHTML = '';
     	let details = detailInfo.split(',');
     	
     	let li = document.createElement('li');
     	li.setAttribute("style","width:100%;");
     	let span = document.createElement('span');
        let strong = document.createElement('strong');
        strong.append(name);
        li.appendChild(strong);
        for(let i=0; i<details.length;i++){
			let detail = details[i];
			if(detail.length > 0){
				let strong2 = document.createElement('strong');
				strong2.append(detail);
			    //strong.classList.add('red');
			    strong2.classList.add('red');
			    li.appendChild(strong2);
			}
		}
     	ul.appendChild(li);
     	showLayer('#assetInfo',x,y);
     	
	}
    
    document.querySelector('.canvasWrap').addEventListener('click',(e) => {
    	e.preventDefault();
    	labelTarget = 'modal';
    	var clickX = canvasX(e.clientX)/labeling.scaleX;
        var clickY = canvasY(e.clientY)/labeling.scaleY;
    	let drawCvs = document.getElementById('drawLayer');
    	if(labeling.mode === 'zoomin' || labeling.mode === 'zoomout'){
	    	if(labeling.mode === 'zoomin'){
	    		if(labeling.scaleX.toFixed(1) ==  1.5){
	    			labeling.mode = 'zoomout';
	    			changeOn(document.querySelector('.icon_reduction'));
	            	document.querySelector('.canvasWrap').style.cssText = '';
	    			document.querySelector('.canvasWrap').style.cssText = labeling.cssTxt+'cursor:zoom-out;';
	    			labeling.scaleX -= 0.1;
	    			labeling.scaleY -= 0.1;
	        	}
	    		else{
	    			labeling.scaleX += 0.1;
	    			labeling.scaleY += 0.1;
	    		}
	        	
	    	}
	    	else if(labeling.mode === 'zoomout'){
	    		if(labeling.scaleX.toFixed(1) ==  0.5){
	    			labeling.mode = 'zoomin';
	    			
	    			changeOn(document.querySelector('.icon_enlargement'));
	    			document.querySelector('.canvasWrap').style.cssText = '';
	    			document.querySelector('.canvasWrap').style.cssText = labeling.cssTxt+'cursor:zoom-in;';
	    			labeling.scaleX += 0.1;
	    			labeling.scaleY += 0.1;
	        	}
	    		else{
	    			labeling.scaleX -= 0.1;
	    			labeling.scaleY -= 0.1;
	    		}	
	    	}
	    	
	    	let imgCvs = document.getElementById('imgLayer');
	    	let imgCtx = imgCvs.getContext('2d');	
	    	// 좌표 정규화해서 새로운 도형을 배열에 추가
	    	imgCvs.width = labeling.img.width;
	    	imgCvs.height = labeling.img.height;
	    	imgCtx.scale(labeling.scaleX,labeling.scaleY);
	    	imgCtx.clearRect(0,0, imgCvs.width, imgCvs.height);
	    	labeling.layerX = labeling.layerX*labeling.scaleX;
	    	labeling.layerY = labeling.layerY*labeling.scaleY;

	    	imgCtx.clearRect(labeling.layerX,labeling.layerY, labeling.img.width/labeling.scaleX, labeling.img.height/labeling.scaleY);
	       	imgCtx.drawImage(labeling.img,labeling.layerX,labeling.layerY,labeling.img.width,labeling.img.height);
	       	drawRectsNormal();
    	}
    	clickX = canvasX(e.clientX)/labeling.scaleX;
        clickY = canvasY(e.clientY)/labeling.scaleY;

    }); 
    
    document.querySelector('.canvasWrapMain').addEventListener('mousemove',(e) => {
		e.preventDefault();
    	let imgCtx = document.getElementById('imgLayerMain').getContext('2d');
    	let drawCtx = document.getElementById('drawLayerMain').getContext('2d');
    	//drawCtx.strokeStyle = "black";
    	//drawCtx.lineWidth = labelingMain.lineWidth;

        labelingMain.ex = canvasX(e.clientX)/labelingMain.scaleX - labelingMain.layerX/labelingMain.scaleX;
        labelingMain.ey = canvasY(e.clientY)/labelingMain.scaleY - labelingMain.layerY/labelingMain.scaleY;
        /*
        if(labelingMain.sx < 0 || labelingMain.sx > 1783){
        	return false;
        }
        if(labelingMain.sy < 0 || labelingMain.sy > 456){
          	return false;
        }
        if(labelingMain.ex < 0 || labelingMain.ex > 1783){
        	return false;
        }
        if(labelingMain.ey < 0 || labelingMain.ey > 456){
          	return false;
        }
        */
        if(labelingMain.mode === 'move' && labelingMain.active){
		
			labelingMain.currentX = canvasX(e.clientX)/labelingMain.scaleX ;
			labelingMain.currentY = canvasY(e.clientY)/labelingMain.scaleY;
			labelingMain.layerX += labelingMain.currentX-labelingMain.initialX;
			labelingMain.layerY += labelingMain.currentY-labelingMain.initialY;   
			labelingMain.initialX = labelingMain.currentX;
	        labelingMain.initialY = labelingMain.currentY;       		        
            imgCtx.clearRect(0,0, labelingMain.img.width/labelingMain.scaleX, labelingMain.img.height/labelingMain.scaleY);
            imgCtx.drawImage(labelingMain.img,labelingMain.layerX,labelingMain.layerY,labelingMain.img.width,labelingMain.img.height);
            drawRectsNormal();
         
		}
	}); 
	
	
	document.querySelector('.canvasWrapMain').addEventListener('mousedown',(e) => {
      	e.preventDefault();
      	labelTarget = 'main';
      	labelingMain.sx = canvasX(e.clientX)/labelingMain.scaleX - labelingMain.layerX/labelingMain.scaleX;
      	labelingMain.sy = canvasY(e.clientY)/labelingMain.scaleY - labelingMain.layerY/labelingMain.scaleY;
      	
      	let clickX = canvasX(e.clientX)/labelingMain.scaleX;
        let clickY = canvasY(e.clientY)/labelingMain.scaleY;
        /*
        if(labelingMain.sx < 0 || labelingMain.sx > 1783){
        	return false;
        }
        if(labelingMain.sy < 0 || labelingMain.sy > 456){
          	return false;
        }

      	if(clickX < 2 || clickX > 1781){
      		//msgCall('선택영역이 문제가 있습니다.',false);
      		return;
      	}
      	if(clickY < 2 || clickY > 454){
      		//msgCall('선택영역이 문제가 있습니다.',false);
      		return;
      	}
      	*/
        labelingMain.rectIndex = getRectangle(labelingMain.sx, labelingMain.sy);
        
        if(labelingMain.mode === 'move' && labelingMain.rectIndex === -1){
	    	labelingMain.active = true;
	    	labelingMain.initialX = canvasX(e.clientX)/labelingMain.scaleX ;
			labelingMain.initialY = canvasY(e.clientY)/labelingMain.scaleY ;
        }

    });
    
    document.querySelector('.canvasWrapMain').addEventListener('mouseup',(e) => {
    	e.preventDefault();
    	/*
    	if(labelingMain.sx < 0 || labelingMain.sx > 1783){
          	return false;
        }	
    	if(labelingMain.sy < 0 || labelingMain.sy > 456){
          	return false;
        }
    	if(labelingMain.ex < 0 || labelingMain.ex > 1783){
        	return false;
        }
        if(labelingMain.ey < 0 || labelingMain.ey > 456){
          	return false;
        }
        */
        if(labelingMain.mode === 'move'){
	        labelingMain.active = false;    
    	}
    	labelingMain.drawing = false;
    	labelingMain.rectIndex = -1;
    });

    document.querySelector('.canvasWrap').addEventListener('mousemove',(e) => {
    	e.preventDefault();
    	let imgCtx = document.getElementById('imgLayer').getContext('2d');
    	let drawCtx = document.getElementById('drawLayer').getContext('2d');
    	drawCtx.strokeStyle = "black";
    	drawCtx.lineWidth = labeling.lineWidth;
        color = choosedColor;
        drawCtx.fillStyle = color;
        labeling.ex = canvasX(e.clientX)/labeling.scaleX - labeling.layerX/labeling.scaleX;
        labeling.ey = canvasY(e.clientY)/labeling.scaleY - labeling.layerY/labeling.scaleY;
        
        if(labeling.sx < 0 || labeling.sx > 1006){
        	return false;
        }
        if(labeling.sy < 0 || labeling.sy > 450){
          	return false;
        }
        if(labeling.ex < 0 || labeling.ex > 1006){
        	return false;
        }
        if(labeling.ey < 0 || labeling.ey > 450){
          	return false;
        }
        if(labeling.mode === 'move'){
        	if (labeling.rectIndex > -1) {
 	           let r = null;
 	            for(let i = 0;i<labeling.arRectangle.length;i++){
 	            	r = labeling.arRectangle[i];
 	            	if(labeling.rectIndex == r.objIdx){
 	            		r.sx += (labeling.ex - labeling.sx);
 	    	            r.sy += (labeling.ey - labeling.sy);
 	    	            r.ex += (labeling.ex - labeling.sx);
 	    	            r.ey += (labeling.ey - labeling.sy);
 	    	            labeling.sx = labeling.ex;
 	   	                labeling.sy = labeling.ey;
 	   	                drawRectsByIdx(r.objIdx);
 	   	                break;
 	            	}
 	            }
 	        
 	        }
        	else{
        		if(labeling.active) {
        			labeling.currentX = canvasX(e.clientX)/labeling.scaleX ;
        			labeling.currentY = canvasY(e.clientY)/labeling.scaleY;
        			labeling.layerX += labeling.currentX-labeling.initialX;
        			labeling.layerY += labeling.currentY-labeling.initialY;   
        			labeling.initialX = labeling.currentX;
    		        labeling.initialY = labeling.currentY;       		        
	                imgCtx.clearRect(0,0, labeling.img.width/labeling.scaleX, labeling.img.height/labeling.scaleY);
	                imgCtx.drawImage(labeling.img,labeling.layerX,labeling.layerY,labeling.img.width,labeling.img.height);
   
    			    let tBody = document.getElementById('assetdisplay').querySelector('.tBody');
    			    let isDrawed = false;
    			    if(tBody.children.length > 0){
    			    	tBody.querySelectorAll('tr').forEach((tr,index) =>{
    			    		if(tr.classList.contains('trSelect')){
    			    			drawRectsByIdx(index);
    			    			isDrawed = true;
        		    			return false;      		    			
    			    		}
    			    		
		        		});
    			    }
    			    if(!isDrawed){
    			    	drawRectsNormal();
    			    }
            	}
        	}      	
    	}
        else if(labeling.mode === 'edit'){
        	if (labeling.rectIndex > -1) {
        		for (let i = 0;i < labeling.arRectangle.length;i++) {
	   	        		let rect = labeling.arRectangle[i];
	   	        		if(rect.objIdx === labeling.rectIndex){
	   	        			rect.isMod = 'Y';
	   	        			break;
	   	        		}	        		
	   	        	}
  
         		let x1 = Math.min(labeling.sx, labeling.ex);
	        	let y1 = Math.min(labeling.sy, labeling.ey);
	        	let x2 = Math.max(labeling.sx, labeling.ex);
	        	let y2 = Math.max(labeling.sy, labeling.ey);
	        	let w = x2 - x1;
	        	let h = y2 - y1;
	        	if(w > 10 && h > 10){
	        		drawRectsByIdx(labeling.rectIndex);
	 	            drawCtx.fillStyle = choosedColor;
	 	            drawCtx.fillRect(labeling.sx*labeling.scaleX+(labeling.layerX*labeling.scaleX), labeling.sy*labeling.scaleY+(labeling.layerY*labeling.scaleY), (labeling.ex-labeling.sx)*labeling.scaleX, (labeling.ey-labeling.sy)*labeling.scaleY);
	 	            drawCtx.strokeRect(labeling.sx*labeling.scaleX+(labeling.layerX*labeling.scaleX), labeling.sy*labeling.scaleY+(labeling.layerY*labeling.scaleY), (labeling.ex-labeling.sx)*labeling.scaleX, (labeling.ey-labeling.sy)*labeling.scaleY);
	        	}
         		
        	}
        }
        else if(labeling.mode === 'draw'){
        	if (labeling.drawing) {       	
        		let x1 = Math.min(labeling.sx, labeling.ex);
	        	let y1 = Math.min(labeling.sy, labeling.ey);
	        	let x2 = Math.max(labeling.sx, labeling.ex);
	        	let y2 = Math.max(labeling.sy, labeling.ey);
	        	let isDelete = false;
	        	if (x1 < 1 || y1 < 1 || x2+10 > labeling.img.width || y2+10 > labeling.img.height){
	        		isDelete = true;
	        	}
        	
        	    if(isDelete){
        	    }
   	            if (labeling.rectIndex > -1) {
   	            	if(x2 - x1 > 10 && y2 - y1 > 10){
   	            		for (let i = 0;i < labeling.arRectangle.length;i++) {
    	   	        		let rect = labeling.arRectangle[i];
    	   	        		if(rect.objIdx === labeling.rectIndex){
    	   	        			rect.isMod = 'Y';
    	   	        			break;
    	   	        		}	        		
    	   	        	}
   	            		//drawRectsNormal();
   	            		drawRectsByIdx(labeling.rectIndex);
           	            drawCtx.fillStyle = choosedColor;
           	            drawCtx.fillRect(labeling.sx*labeling.scaleX+(labeling.layerX*labeling.scaleX), labeling.sy*labeling.scaleY+(labeling.layerY*labeling.scaleY), (labeling.ex-labeling.sx)*labeling.scaleX, (labeling.ey-labeling.sy)*labeling.scaleY);
           	            drawCtx.strokeRect(labeling.sx*labeling.scaleX+(labeling.layerX*labeling.scaleX), labeling.sy*labeling.scaleY+(labeling.layerY*labeling.scaleY), (labeling.ex-labeling.sx)*labeling.scaleX, (labeling.ey-labeling.sy)*labeling.scaleY);
   	            	}
   	            	else{
   	            		return false;
   	            	}
   	            }
   	            else{
   	            	drawRectsNormal();
       	            drawCtx.fillStyle = choosedColor;
       	            drawCtx.fillRect(labeling.sx*labeling.scaleX+(labeling.layerX*labeling.scaleX), labeling.sy*labeling.scaleY+(labeling.layerY*labeling.scaleY), (labeling.ex-labeling.sx)*labeling.scaleX, (labeling.ey-labeling.sy)*labeling.scaleY);
       	            drawCtx.strokeRect(labeling.sx*labeling.scaleX+(labeling.layerX*labeling.scaleX), labeling.sy*labeling.scaleY+(labeling.layerY*labeling.scaleY), (labeling.ex-labeling.sx)*labeling.scaleX, (labeling.ey-labeling.sy)*labeling.scaleY);
   	            }      
     	            
        	 }
        	
    	}
       
    	
    });
    
    

    document.querySelector('.canvasWrap').addEventListener('mousedown',(e) => {
      	e.preventDefault();
      	labelTarget = 'modal';
        // 클릭한 좌표 구하고 그 위치에 도형이 있는지 조사
      	labeling.sx = canvasX(e.clientX)/labeling.scaleX - labeling.layerX/labeling.scaleX;
      	labeling.sy = canvasY(e.clientY)/labeling.scaleY - labeling.layerY/labeling.scaleY;
      	
      	let clickX = canvasX(e.clientX)/labeling.scaleX;
        let clickY = canvasY(e.clientY)/labeling.scaleY;

        if(labeling.sx < 0 || labeling.sx > 1006){
        	return false;
        }
        if(labeling.sy < 0 || labeling.sy > 450){
          	return false;
        }

      	if(clickX < 2 || clickX > 1004){
      		//msgCall('선택영역이 문제가 있습니다.',false);
      		return;
      	}
      	if(clickY < 2 || clickY > 448){
      		//msgCall('선택영역이 문제가 있습니다.',false);
      		return;
      	}
        labeling.rectIndex = getRectangle(labeling.sx, labeling.sy);

      	if(labeling.mode === 'draw'){
	        if (labeling.rectIndex > -1) {
	        	labeling.rectIndex = -1;
	        }
      		labeling.drawing = true;
      	}
      	else if(labeling.mode === 'edit'){
      		//labeling.drawing = true;
      	}
	    else if(labeling.mode === 'delete'){
	    	let isDelete = false;
	    	if (labeling.rectIndex > -1) {
		    	for (let i = 0;i < labeling.arRectangle.length;i++) {
		    		let r = labeling.arRectangle[i];
		            if(r.objIdx == labeling.rectIndex && r.delYn == 'Y'){
		            	if(r.color == choosedColor){
		            		
		            	}
		            	labeling.arRectangle.splice(i, 1);
		            	isDelete = true;
	        			break;
		            }
		        }
	    	}
	    	labeling.drawing = false;
	    	if(isDelete){
	    		let trs = document.getElementById('assetdisplay').querySelector('.tBody').querySelectorAll('tr');
	        	if(trs.length > 0){
	        		trs.forEach((tr,index) =>{
	        			if(tr.getAttribute('data-value') == labeling.rectIndex){
	        				tr.remove();
	        				return false;
	        			}
	        		});
	        	}
	    		drawRectsNormal();
	    		labeling.rectIndex = -1;
	    	}
    	    else{
	        	msgCall(msg.invalidDelZone,false,false);
	        }
	        
      	}
	    else if(labeling.mode === 'move'){
		    if (labeling.rectIndex === -1) {
		    	labeling.active = true;
		    	labeling.initialX = canvasX(e.clientX)/labeling.scaleX ;
    			labeling.initialY = canvasY(e.clientY)/labeling.scaleY ;
	        }
	        else{
	        	let trs = document.getElementById('assetdisplay').querySelector('.tBody').querySelectorAll('tr');
	        	if(trs.length > 0){
	        		trs.forEach((tr,index) =>{
	        			if(tr.getAttribute('data-value') == labeling.rectIndex){
	        				tr.classList.add('trSelect');
	        				drawRects(labeling.sx,labeling.sy,false);
	        			}
	        			else{
	        				
	        				tr.classList.remove('trSelect');
	        			}
	        		});
	        	}
	        
	        }
      	}
  
    });
    
    
    
    document.querySelector('.canvasWrap').addEventListener('mouseup',(e) => {
    	e.preventDefault();
    	if(labeling.sx < 0 || labeling.sx > 1006){
          	return false;
        }	
    	if(labeling.sy < 0 || labeling.sy > 450){
          	return false;
        }
    	if(labeling.ex < 0 || labeling.ex > 1006){
        	return false;
        }
        if(labeling.ey < 0 || labeling.ey > 450){
          	return false;
        }
    	if(labeling.mode === 'select'){
    		if (labeling.rectIndex > -1) {
    			selectZone(labeling.rectIndex);
    		}
    	}
    	else if(labeling.mode === 'edit'){
    		if (labeling.rectIndex > -1) {
    			let isChange = false;
    			
    			let x1 = Math.min(labeling.sx, labeling.ex);
	        	let y1 = Math.min(labeling.sy, labeling.ey);
	        	let x2 = Math.max(labeling.sx, labeling.ex);
	        	let y2 = Math.max(labeling.sy, labeling.ey);
	        	let w = x2 - x1;
	        	let h = y2 - y1;
	        	for (let i = 0;i < labeling.arRectangle.length;i++) {
    		   		let rect = labeling.arRectangle[i];
    		   		if(rect.objIdx == labeling.rectIndex && rect.isMod == 'Y' ){
    		   			console.log("mod rect:",rect);
    		   			rect.isMod = '';
    		   			if(w > 10 && h > 10){
    		   				rect.sx = x1;
    		   				rect.ex = x2;
    		   				rect.sy = y1;
    		   				rect.ey = y2;
    		   				isChange = true;
    		   			}
    		   			
    		   		}
    			}
	        	if(isChange){
	        		let trs = document.getElementById('assetdisplay').querySelector('.tBody').querySelectorAll('tr');
		        	if(trs.length > 0){
		        		trs.forEach((tr,index) =>{
		        			if(tr.getAttribute('data-value') == labeling.rectIndex){
		        				tr.classList.add('trSelect');
		        			}
		        			else{
		        				
		        				tr.classList.remove('trSelect');
		        			}
		        		});
		        	}
	        		editXy();
	        	}
    			
    		}
    	}
    	else if(labeling.mode === 'draw'){
    		if(labeling.rectIndex > -1){
    			editXy();
    		}
    		else{
    			if(labeling.sx < 0 || labeling.sx > 1006 || labeling.sy < 0 || labeling.sy > 450 
    					|| labeling.ex < 0 || labeling.ex > 1006 || labeling.ey < 0 || labeling.ey > 450){
    	        }	
    			else{
    				
    				let x1 = Math.min(labeling.sx, labeling.ex);
    	        	let y1 = Math.min(labeling.sy, labeling.ey);
    	        	let x2 = Math.max(labeling.sx, labeling.ex);
    	        	let y2 = Math.max(labeling.sy, labeling.ey);

    	        	if(x1 < 1){
    	        		x1 = 1;
    	          	}
    	        	if(y1 < 1){
    	        		y1 = 1;
    	          	}
    	        	if(x2 > 1005){
    	        		x2 = 1005;
    	          	}
    	        	if(y2 > 449){
    	        		y2 = 449;
    	          	}
               	
               		let objIdx = labeling.objCnt;
               		if(labeling.arRectangle.length > 0){
               			objIdx = parseInt(labeling.arRectangle[labeling.arRectangle.length-1].objIdx)+1;
               		}
       	        	labeling.arRectangle.push(new Rectangle(x1, y1, x2, y2,color,objIdx,'','','Y'));
       	        	drawRectsByIdx(objIdx);
       	        	
       	        	let tBody = document.getElementById('assetdisplay').querySelector('.tBody');
       	        	let trs = tBody.querySelectorAll('tr');
       	        	if(trs.length > 0){
       	        		trs.forEach((tr) => {
       	        			if(tr.classList.contains('trSelect')){
           	        			tr.classList.remove('trSelect');
           	        		}
       	        		});
       	        		
       	        	}
       	        	let tr = document.createElement('tr');
       	        	tr.setAttribute('data-value',objIdx);
       	        	tr.classList.add('trSelect');
       	        	for(let i=0;i< 7;i++){
						   let td = document.createElement('td');
						   if(i === 0){
							   td.setAttribute('data-id','id');
							   td.setAttribute('style','display:none;');
							   td.setAttribute('data-value','');
						   }
						   else if(i === 1){
							   let input = document.createElement('input');
							   input.setAttribute("type","text");
							  
							   td.appendChild(input);
							   input.addEventListener('click',e => {
								   selectZoneName(e.target.parentNode.parentNode);
							   });
							   td.setAttribute('data-id',"zoneName");
						   }
						   else if( i === 2){
							   td.textContent = (x1).toFixed(0);
							   td.setAttribute('data-id',"startX");
							   td.setAttribute('data-value',x1);
						   }
						   else if(i === 3){
							   td.textContent = (y1).toFixed(0);
							   td.setAttribute('data-id',"startY");
							   td.setAttribute('data-value',y1);
						   }
						   else if(i === 4){
							   td.textContent = (x2).toFixed(0);
							   td.setAttribute('data-id',"endX");
							   td.setAttribute('data-value',x2);
						   }
						   else if(i === 5){
							   td.textContent = (y2).toFixed(0);
							   td.setAttribute('data-id',"endY");
							   td.setAttribute('data-value',y2);
						   }
						   else{
							   td.setAttribute('data-id','delYn');
							   td.setAttribute('style','display:none;');
							   td.setAttribute('data-id',"delYn");
							   td.setAttribute('data-value','Y');
						   }
						   tr.appendChild(td);
					}
       	        	tBody.appendChild(tr);

    			}
	        }
	        
	       
    	}
    	else if(labeling.mode === 'move'){
	        labeling.active = false;
	        if(labeling.rectIndex > -1){
	        	editXy();
	        }	     
    	}
    	labeling.drawing = false;
    	labeling.rectIndex = -1;
    });  
    
</script>
</th:block>
</html>
