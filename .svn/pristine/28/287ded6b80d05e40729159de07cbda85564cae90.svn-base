<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Asset">
  
  <select id="selectAssetCount" parameterType="map" resultType="long">
        SELECT COUNT(1) 
         FROM network_asset_info A
         LEFT JOIN zone_location B
         ON A.ZONE_ID = B.ZONE_ID
         <include refid="whereAssetList"></include>
  </select>

  <select id="selectAssetList" parameterType="map" resultType="CmmnMap">

     	SELECT  RN
     	      , A.ASSET_ID ID
     	      , B.LARGE_CATEGORY
     	      , B.SMALL_CATEGORY
     	      , B.SYSTEM_ID
     	      , B.ASSET_NAME
     	      , B.IP_ADDRESS
     	      , A.ZONE_ID
     	      , A.ZONE_NAME
     	      , B.MANAGER
     	      , B.CONFIDENTIALITY_LEVEL
     	      , B.INTEGRITY_LEVEL
     	      , B.AVAILABILITY_LEVEL
     	      , B.ASSET_REG_TIME
        FROM ( SELECT A.ASSET_ID
                    , B.ZONE_ID
                    , B.ZONE_NAME
                    , ROW_NUMBER() OVER (ORDER BY A.ASSET_REG_TIME DESC,A.ASSET_ID DESC) AS RN
               FROM  network_asset_info A
               LEFT JOIN zone_location B
               ON A.ZONE_ID = B.ZONE_ID
               <include refid="whereAssetList"></include>
               LIMIT #{startRow},#{rowPerPage}) A
        STRAIGHT_JOIN network_asset_info B
        ON (A.ASSET_ID = B.ASSET_ID)
        ORDER BY RN
  </select>
  
  <sql id="whereAssetList">
         <where>
         <if test='frDt != null and !frDt.equals("")'>
         AND A.ASSET_REG_TIME <![CDATA[>=]]> #{frDt}
         </if>
         <if test='toDt != null and !toDt.equals("")'>
         AND A.ASSET_REG_TIME <![CDATA[<=]]> #{toDt}
         </if>
          <if test='schLargeCategory != null and !schLargeCategory.equals("")'>
          AND A.LARGE_CATEGORY IN 
          <foreach collection="schLargeCategory" item="item" open="(" close=")" separator="," index="idx">
         #{item}
          </foreach> 
          </if>
          <if test='schSmallCategory != null and !schSmallCategory.equals("")'>
          AND A.SMALL_CATEGORY IN 
          <foreach collection="schSmallCategory" item="item" open="(" close=")" separator="," index="idx">
         #{item}
          </foreach> 
          </if>
          <if test='schAssetName != null and !schAssetName.equals("")'>
          AND A.ASSET_NAME LIKE CONCAT('%',#{schAssetName},'%')
          </if>
           <if test='schZoneId != null and !schZoneId.equals("")'>
           AND B.ZONE_ID IN 
          <foreach collection="schZoneId" item="item" open="(" close=")" separator="," index="idx">
          #{item}
          </foreach> 
          </if>
         </where>
  </sql>
  
  <select id="selectAssetDispoCount" parameterType="map" resultType="long">
        SELECT SUM(A.CNT)
        FROM 
        (SELECT COUNT(1) CNT
		FROM asset_status_info 
		WHERE ASSET_STATUS != 2
		AND DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR)
		UNION ALL 
		SELECT COUNT(1) CNT
		FROM threat_info
		WHERE DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR) ) A
  </select>
  
  
  
  <select id="selectAssetDispoList" parameterType="map" resultType="CmmnMap">

        SELECT * FROM 
			(
			 SELECT A.*
			     , ROW_NUMBER() OVER (ORDER BY A.DETECTION_TIME DESC,ID DESC) AS RN
			FROM 
				(SELECT A.STATUS_ID ID
				     , A.DETECTION_TIME
				     , '자산상태 이상' EVENT_TP
				     , A.ASSET_STATUS IMP_CD
				     , B.CODE_KR IMP_NM
				     , C.REASON_NAME DETAIL_INFO
				     , 'AS' TP
				     , D.ASSET_ID
				     , D.ZONE_ID
				FROM asset_status_info A
				LEFT JOIN code_info B
				ON    A.ASSET_STATUS = B.CODE
				AND   B.MAINGROUP = 'AS'
				AND   B.SUBGROUP = 'ST'
				LEFT JOIN reason C
				ON    A.REASON_ID = C.REASON_ID
				LEFT JOIN network_asset_info D
				ON A.SYSTEM_ID = D.SYSTEM_ID
				WHERE A.ASSET_STATUS != 2
				AND   A.DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR)
				UNION ALL 
				SELECT A.THREAT_ID
				     , A.DETECTION_TIME
				     , '위협탐지'
				     , A.THREAT_IMPORTANCE
				     , B.CODE_KR
				     , A.DETECTION_THREAT_NAME 
				     , 'TH' 
				     , CONCAT(C.ASSET_ID,'-',D.ASSET_ID) 
				     , CONCAT(C.ZONE_ID,'-',D.ZONE_ID) 
				FROM threat_info A
				LEFT JOIN code_info B
				ON    A.THREAT_IMPORTANCE = B.CODE
				AND   B.MAINGROUP = 'TH'
				AND   B.SUBGROUP = 'IM' 
				LEFT JOIN network_asset_info C
				ON A.SRC_IP = C.IP_ADDRESS
				LEFT JOIN network_asset_info D
				ON A.DST_IP = D.IP_ADDRESS
				WHERE   A.DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR)) A
            LIMIT #{startRow},#{rowPerPage}) A
        ORDER BY RN

  </select>
  
  <select id="selectAssetDispoZoneList" parameterType="map" resultType="CmmnMap">
  
       SELECT A.ASSET_ID
		     , MAX(A.ZONE_ID) ZONE_ID
		     , MAX(A.ASSET_NAME) ASSET_NAME
		     , MAX(A.LARGE_CATEGORY)  LARGE_CATEGORY
		     , B.DETAIL_INFO
		  FROM network_asset_info A
		 LEFT JOIN  (
		  <include refid="appendAssetDispoZone"></include>
		      ) B
	    ON A.ASSET_ID = B.ASSET_ID
	    GROUP BY A.ASSET_ID,B.DETAIL_INFO
	    ORDER BY A.ZONE_ID,A.LARGE_CATEGORY,A.ASSET_ID
  </select> 
  
  <select id="selectAssetDispoZoneGroup" parameterType="map" resultType="CmmnMap">
  
      SELECT A.ZONE_ID
           , MAX(A.START_X) START_X
           , MAX(A.START_Y) START_Y
           , MAX(A.END_X) END_X
           , MAX(A.END_Y) END_Y
           , IFNULL(B.ZONE_ID, 'N') IS_PROBLEM
	 FROM zone_location A
		 LEFT JOIN (
		  <include refid="appendAssetDispoZone"></include>
		      ) B
      ON A.ZONE_ID = B.ZONE_ID
      GROUP BY A.ZONE_ID
  </select>
  
  <sql id="appendAssetDispoZone">
      SELECT E.ZONE_ID
		      , E.START_X
		      , E.START_Y
		      , E.END_X
		      , E.END_Y
		      , D.ASSET_ID
		      , D.LARGE_CATEGORY
		      , C.REASON_NAME DETAIL_INFO
		FROM asset_status_info A
		LEFT JOIN code_info B
		ON    A.ASSET_STATUS = B.CODE
		AND   B.MAINGROUP = 'AS'
		AND   B.SUBGROUP = 'ST'
		LEFT JOIN reason C
		ON    A.REASON_ID = C.REASON_ID
		LEFT JOIN network_asset_info D
		ON A.SYSTEM_ID = D.SYSTEM_ID
		LEFT JOIN zone_location E
		ON D.ZONE_ID = E.ZONE_ID
		WHERE A.ASSET_STATUS != 2
		AND   A.DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR)
		UNION ALL 
		SELECT D.ZONE_ID
		     , D.START_X
		     , D.START_Y
		     , D.END_X
		     , D.END_Y
		     , C.ASSET_ID
		     , C.LARGE_CATEGORY
		     , A.DETECTION_THREAT_NAME 
		FROM threat_info A
		LEFT JOIN code_info B
		ON    A.THREAT_IMPORTANCE = B.CODE
		AND   B.MAINGROUP = 'TH'
		AND   B.SUBGROUP = 'IM' 
		LEFT JOIN network_asset_info C
		ON A.SRC_IP = C.IP_ADDRESS
	    LEFT JOIN zone_location D
		ON C.ZONE_ID = D.ZONE_ID
		WHERE   A.DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR)
		UNION ALL 
		SELECT D.ZONE_ID
		     , D.START_X
		     , D.START_Y
		     , D.END_X
		     , D.END_Y
		     , C.ASSET_ID
		     , C.LARGE_CATEGORY
		     , A.DETECTION_THREAT_NAME 
		FROM threat_info A
		LEFT JOIN code_info B
		ON    A.THREAT_IMPORTANCE = B.CODE
		AND   B.MAINGROUP = 'TH'
		AND   B.SUBGROUP = 'IM' 
		LEFT JOIN network_asset_info C
		ON A.DST_IP = C.IP_ADDRESS
	    LEFT JOIN zone_location D
		ON C.ZONE_ID = D.ZONE_ID
		WHERE  A.DETECTION_TIME > DATE_ADD(NOW(), INTERVAL -#{intervalHm} HOUR)
  </sql>
  
  
  <select id="selectAssetStatus" parameterType="map" resultType="CmmnMap">
        SELECT (SELECT COUNT(1)
				FROM asset_status_info A 
				INNER JOIN   
				(SELECT SYSTEM_ID,MAX(DETECTION_TIME) DETECTION_TIME
				FROM asset_status_info 
				GROUP BY SYSTEM_ID) B
				ON A.SYSTEM_ID = B.SYSTEM_ID
				AND A.DETECTION_TIME = B.DETECTION_TIME
				AND ASSET_STATUS != 2) AS ASSET_THREAT_CNT
              ,(SELECT COUNT(1) FROM network_asset_info) AS ASSET_TOT_CNT
  </select>
  
  <select id="selectAssetAffair" parameterType="map" resultType="CmmnMap">
     SELECT LARGE_CATEGORY,SUM(1) CNT
			FROM (SELECT A.SYSTEM_ID
				  FROM asset_status_info A 
			      INNER JOIN   
				  (SELECT SYSTEM_ID,MAX(DETECTION_TIME) DETECTION_TIME
				  FROM asset_status_info 
				  GROUP BY SYSTEM_ID) B
				  ON A.SYSTEM_ID = B.SYSTEM_ID
				  AND A.DETECTION_TIME = B.DETECTION_TIME
				  AND ASSET_STATUS != 2) ASI
			LEFT JOIN network_asset_info NSI
			ON ASI.SYSTEM_ID = NSI.SYSTEM_ID
			GROUP BY NSI.LARGE_CATEGORY

  </select>
  
  <select id="selectSystemIdCount" parameterType="map" resultType="long">
        SELECT COUNT(1) 
		FROM network_asset_info
	    WHERE SYSTEM_ID = #{systemId}
	    <if test='assetId != null and !assetId.equals("")'>
         AND ASSET_ID != #{assetId}
        </if>
  </select>
  
   <select id="selectZoneLocationList" parameterType="map" resultType="CmmnMap">
        SELECT ZONE_ID ID
             , ZONE_NAME
             , START_X
             , START_Y
             , END_X
             , END_Y
             , CASE WHEN  (SELECT COUNT(1) FROM network_asset_info a WHERE a.ZONE_ID = t.ZONE_ID) > 0 THEN 'N' ELSE 'Y' END DEL_YN
        FROM zone_location t
  </select>
  
  <update id="insertAsset" parameterType="map">
        INSERT INTO network_asset_info(SYSTEM_ID
                                     , ZONE_ID
                                     , LAST_UPDATER
                                     , ASSET_REG_TIME
                                     , ASSET_NAME
                                     , IP_ADDRESS
                                     , MANAGER
                                     , CONFIDENTIALITY_LEVEL
                                     , INTEGRITY_LEVEL
                                     , AVAILABILITY_LEVEL
                                     , LARGE_CATEGORY
                                     , SMALL_CATEGORY)
                               VALUES(#{systemId}
                                     ,#{zoneId}
                                     ,#{lastUpdater}
                                     ,SYSDATE()
                                     ,#{assetName}
                                     ,#{ipAddress}
                                     ,#{manager}
                                     ,#{confidentialityLevel}
                                     ,#{integrityLevel}
                                     ,#{availabilityLevel}
                                     ,#{largeCategory}
                                     ,#{smallCategory}
                                     )
  </update>
  
   <update id="updateAsset" parameterType="map">
        UPDATE network_asset_info
                             SET SYSTEM_ID = #{systemId}
                               , ZONE_ID = #{zoneId}
                               , LAST_UPDATER = #{lastUpdater}
                               , ASSET_UPDATE_TIME = SYSDATE()
                               , ASSET_NAME = #{assetName}
                               , IP_ADDRESS = #{ipAddress}
                               , MANAGER = #{manager}
                               , CONFIDENTIALITY_LEVEL = #{confidentialityLevel}
                               , INTEGRITY_LEVEL = #{integrityLevel}
                               , AVAILABILITY_LEVEL = #{availabilityLevel} 
                               , LARGE_CATEGORY = #{largeCategory} 
                               , SMALL_CATEGORY = #{smallCategory} 
        WHERE ASSET_ID = #{assetId}
  </update>
  
  <delete id="deleteAsset" parameterType="map">
        DELETE FROM network_asset_info
         WHERE ASSET_ID IN
         <foreach collection="list" item="row" open="(" close=")" separator=",">
	         <foreach collection="row" item="col" index="key">
		         <if test='key.equals("id")'>
		            #{col} 
		         </if>
		     </foreach> 
         </foreach>     
  </delete>
  
   <update id="updateZoneLocation" parameterType="map">
        UPDATE zone_location 
                         SET ZONE_NAME = #{zoneName}
                           , START_X = #{startX, jdbcType=NUMERIC}
                           , START_Y = #{startY, jdbcType=NUMERIC}
                           , END_X = #{endX, jdbcType=NUMERIC}
                           , END_Y = #{endY, jdbcType=NUMERIC}
        WHERE ZONE_ID = #{id}
 </update>
 
 <update id="insertZoneLocation" parameterType="map">
        INSERT INTO zone_location(ZONE_NAME
                                , START_X
                                , START_Y
                                , END_X
                                , END_Y)
                          VALUES(#{zoneName}
                                ,#{startX, jdbcType=NUMERIC}
                                ,#{startY, jdbcType=NUMERIC}
                                ,#{endX, jdbcType=NUMERIC}
                                ,#{endY, jdbcType=NUMERIC}
                                )
 </update>
  
  <delete id="deleteZoneLocation" parameterType="map">
        DELETE FROM zone_location 
        WHERE ZONE_ID NOT IN
        (SELECT ZONE_ID FROM network_asset_info GROUP BY ZONE_ID)
  </delete>
  
 
   
</mapper>