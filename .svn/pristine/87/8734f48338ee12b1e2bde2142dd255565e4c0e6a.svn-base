<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
	  xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	  layout:decorate="~{th/cmmn/layout}">
<head>
<title>사이버 위협 전시</title>
</head>
<th:block layout:fragment="content">
<div class="container-wide">
	<div class="container">
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_06_01"></span><strong>사이버 위협 전시</strong></h4>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-3">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_06_02"></span><strong>탐지 이벤트 등급</strong></h4>
					<div class="items"> 
						<!-- item contnets // -->
						<div class="eventRating ac">
							<ul>
								<li class="high"><span>상</span><strong></strong></li>
								<li class="middle"><span>중</span><strong></strong></li>
								<li class="low"><span>하</span><strong></strong></li>
							</ul>
						</div>
						<!-- // item contnets --> 
					</div>
				</div>
			</div>
			<div class="item-box col-3">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_06_03"></span><strong>탐지 이벤트 수</strong></h4>
					<div class="items"> 
						<!-- item contnets // -->
						<div class="eventNum ac">
							<ul>
								<li class="high"><strong></strong><span></span></li>
							</ul>
						</div>
						<!-- // item contnets --> 
					</div>
				</div>
			</div>
			<div class="item-box col-7">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_06_04"></span><strong>탐지 시간</strong></h4>
					<div class="items"> <!-- item contnets // --><span class="imgWrap"><canvas id="lineChart" width="1396" height="280"></canvas></span><!-- // item contnets --> </div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_search"></span><strong>조회조건</strong></h4>
					<div class="items" style="overflow: visible"> 
						<!-- item contnets // -->
						<div class="schwrap">
							<ul>
								<li>
									<label>시간
									<input id="frDt" type="datetime-local" data-placeholder="날짜 선택" value="" class="form-control"></input>
									   ~
									<input id="toDt" type="datetime-local" data-placeholder="날짜 선택" value="" class="form-control"></input>
									<!-- 	<input type="text" class="form-control" placeholder="2023-01-01 10:00"> 
										~
										<input type="text" class="form-control" placeholder="2023-01-01 10:00">-->
									</label>
									<label>송신 IP
										<input id="schSrcIp" type="text" class="form-control" placeholder="192.168.100.102">
									</label>
								</li>
								<li>
								     <div  class="selectWrap">탐지방식
									    <div class="multiselect">
											<div class="selectBox">
												<div class="selected">
													<div class="selected-value">전체</div>
													<div class="arrow"></div>
												</div>
												<div class="overSelect"></div>
											</div>
											<div id="schThreatDetectionMethod" class="checkboxes" style="display:none;">
												
											</div>
										</div> 
									</div>
									<label>수신 IP
										<input id="schDstIp" type="text" class="form-control" placeholder="192.168.100.102">
									</label>
								</li>
								<li>
									<div  class="selectWrap">정오탐 판정
									    <div class="multiselect">
											<div class="selectBox">
												<div class="selected">
													<div class="selected-value">전체</div>
													<div class="arrow"></div>
												</div>
												<div class="overSelect"></div>
											</div>
											<div id="schAnalysisResult" class="checkboxes" style="display:none;">
												
											</div>
										</div> 
									</div>
									<label>송신 IP Port
										<input type="text" id="schSrcPort" class="form-control number" maxlength="5" placeholder="8500">
									</label>
								</li>
								<li>
									<div  class="selectWrap">위협 주요도
									    <div class="multiselect">
											<div class="selectBox">
												<div class="selected">
													<div class="selected-value">전체</div>
													<div class="arrow"></div>
												</div>
												<div class="overSelect"></div>
											</div>
											<div id="schThreatImportance" class="checkboxes" style="display:none;">
												
											</div>
										</div> 
									</div>
									<label>수신 IP Port
										<input type="text" id="schDstPort" class="form-control number" maxlength="5" placeholder="6500">
									</label>
								</li>
							</ul>
							<div>
							<button class="btn medium darkblue initBtn"><span class="iconBtn icon_reset"></span><strong>초기화</strong></button>
							<button class="btn medium darkblue schBtn"><span class="iconBtn icon_btn_01"></span><strong>검색</strong></button>
							</div>
						</div>
						<!-- // item contnets --> 
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_list"></span><strong>조회목록</strong></h4>
					<div class="items" style="height:380px; overflow:hidden"> 
						<div class="tablewrap">
							<table>
								<thead class="tHead">
								</thead>
								<tbody class="tBody">
								</tbody>
							</table>
						</div>
						<div class="page_wrap">
							<div class="page_nation">
								<input type="hidden" name="rowPerPage" class="rowPerPage" value="6">
							</div>							
						</div>
					</div>
				</div>
			</div>
		</div>
		<!--//Grid--> 
	</div>
</div>



<script th:inline="javascript"> 
	window.addEventListener('DOMContentLoaded', () => {
		ncos.schMode = 'auto';
		init();
		initWhiteList();
		ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//50초
		document.querySelector('.initBtn').addEventListener('click',e => {
			e.preventDefault();
			ncos.schMode = 'auto';
			ncos.initBtn = true;
			gfn_initObj(document.querySelector('.schwrap'));
			searchFunc();
			ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//50초
	    });	    
	    document.querySelector('.schBtn').addEventListener('click',e => {
	    	e.preventDefault();
	    	ncos.schMode = 'menual';
	    	clearInterval(ncos.intervalFunc);
	    	searchFunc();
	    });
	});

	let lineChart = null;
    const init = () => {
    	document.getElementById('frDt').value= gfn_getDiffDt(ncos.diffDay);
    	document.getElementById('toDt').value= gfn_getTodayDt();
    	createMultiChk(document.getElementById('schThreatDetectionMethod'),'THTY');
    	createMultiChk(document.getElementById('schAnalysisResult'),'THRES');
    	createMultiChk(document.getElementById('schThreatImportance'),'THIM');
    	const headColumns = [{data_id:"id",label:"id",width:"0px"}
					        ,{data_id:"detectionTime",label:"탐지시간" ,data_dateFrmt:"yy-mm-dd hh:mi:ss"}
					        ,{data_id:"srcIp",label:"송신IP"}
					        ,{data_id:"dstIp",label:"수신IP"}
					        ,{data_id:"srcPort",label:"송신Port"}
					        ,{data_id:"dstPort",label:"수신Port"}
					        ,{data_id:"threatDetectionMethod",label:"탐지방식", data_grpCd:"THTY"}
					        ,{data_id:"detectionThreatName",label:"탐지 위험명"}
					        ,{data_id:"analysisResult",label:"정오탐판정",data_grpCd:"THRES"}
					        ,{data_id:"threatImportance",label: "위협중요도",data_grpCd:"THIM", data_class:"threat"}
					        ,{data_id:"detailBtn",label: "상세보기", data_btnNm:"상세보기"}
					       ];
		gridInit(document.querySelector('.tablewrap'),headColumns);
		pageInit(document.querySelector(".page_nation"),searchFunc,page.rowPerPage);
		searchFunc();
    }
    const searchFunc = (invoker) => {
    	pageSearch("/getThreatList",document.querySelector(".tablewrap"),document.querySelector(".page_nation"),invoker,searchFunc,searchAfterFunc);
    	
    }
    
    const searchAfterFunc = (appendData) => {
    	setStatus(appendData.eventStatusInfo);
    	drawLineChart(appendData.detectPriorList);
    }
    
    const detailFunc = (data) => {
    	setThreatAnalysis(data);
    }
    
    const trncThreatAnalysisAfterFunc = () => {
    	settingThreatAnalysis.querySelector('.popClose').click();
    	searchFunc();
    }
   
    
    const setStatus = (data) => {
    	//console.log("setStatus data:",data);
    	let eventRating = document.querySelector('.eventRating');
    	let eventLis = eventRating.querySelectorAll('li');
    	eventLis.forEach((li,index) => {
    		let strong = li.querySelector('strong');
    		strong.innerHTML = '';
    		if(li.classList.contains('high')){
    			strong.append(data.highPrior);
    		}
    		else if(li.classList.contains('middle')){
    			strong.append(data.middlePrior);
    		}
            else if(li.classList.contains('low')){
            	strong.append(data.lowPrior);
    		}
    	});
    	
    	let eventNum = document.querySelector('.eventNum');
    	let eventStrong = eventNum.querySelector('strong');
    	let eventSpan = eventNum.querySelector('span');
    	eventStrong.innerHTML = '';
    	eventSpan.innerHTML = '';
    	eventStrong.append(data.detectEventCnt);  //(↓15)
    	if(data.updownCnt > 0) {
    		eventSpan.append('(↑'+data.updownCnt+')');
    	}
    	else if(data.updownCnt === 0) {
    		eventSpan.append('('+data.updownCnt+')');
    	}
    	else{
    		eventSpan.append('(↓'+data.updownCnt*(-1)+')');
    	}
    }
    
    const drawLineChart = (chartData) => {
    	//console.log("drawLineChart1 chartData:",chartData);
    	let lineLabels = new Array();
    	let dataH = new Array();
    	let dataM = new Array();
    	let dataL = new Array();
    	chartData.forEach((chartItem,index) => {
    		if(chartItem.threat === 'H'){
    			lineLabels.push(chartItem.hm);
    			dataH.push(chartItem.cnt);
    	    }
    		else if(chartItem.threat === 'M'){
    			dataM.push(chartItem.cnt);
    		}
            else if(chartItem.threat === 'L'){
            	dataL.push(chartItem.cnt);
    		}
    	});
    	

    	const lineData = {labels: lineLabels,
    			          datasets: [{ label: ' 상',
    			                        data: dataH,
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: 'rgb(255, 0, 0)',
    			                        backgroundColor: 'rgb(255, 0, 0)',
    			                        tension: 0.1
    			                    },
    			                    { label: ' 중',
    			                        data: dataM,
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: 'rgb(255, 165, 0)',
    			                        backgroundColor: 'rgb(255, 165, 0)',
    			                        tension: 0.1
    			                    },
    			                    { label: ' 하',
    			                        data: dataL,
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: 'rgb(255, 254, 2)',
    			                        backgroundColor: 'rgb(255, 254, 2)',
    			                        //pointBorderColor: 'rgb(75, 89, 192)',
    			                        tension: 0.1
    			                    }
    			                    ]
    	                 };
    	
    	const config = { type: 'line',
    			         data: lineData,
    			         options: { responsive: true,
		    			        	animation: {
					        	         duration: 0
					        	    },
    			        	        scales: {
    			        	                 x: {
    			        	                	 ticks: {
    			        	                         color: 'black',
    			        	                	 },
    			        	                	
    			        	                 },
    			        	                 y: {
    			        	                	 ticks: {
    			        	                         color: 'black',
    			        	                     },
    			        	                     grid: {
    			        	                    	 color : 'rgb(90, 90, 90)',
    			        	                         display: true,
    			        	                         //drawOnChartArea: true,
    			        	                         //drawTicks: true,
    			        	                     }
    			        	                 }
    			        	             },
    			        	             
	    			        	    plugins: {legend: {
	    	       			    		      position: 'bottom',
	    	       			                  display: true,
	    	       			                  labels: {
	    	       			                	  usePointStyle: true,
	    	       			                	  color: 'black',
	    	       			                	  padding : 30,
	    	       			                      font: {
	                                                size: 15,
	    	       		                          }
	    	       			                	// fill : true
	    	       			                  }
	    	       			           }
	    	       			      }
    			         },
    			        };
    	let uiMode = gfn_getStorage(ncos.uiMode);
       	config.options.scales.x.ticks.color = chartColor;
       	config.options.scales.y.ticks.color = chartColor;
       	config.options.plugins.legend.labels.color = chartColor;
    
    	if(lineChart != null){
    		lineChart.destroy();
	    }
    	lineChart = new Chart(document.getElementById('lineChart').getContext("2d"),config);	 
    	
    }
  
</script>
</th:block>
</html>
