package mil.ln.ncos.client.service;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.integration.ip.udp.UnicastSendingMessageHandler;
import org.springframework.integration.support.MessageBuilder;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import mil.ln.ncos.client.gateway.TcpGateway;
import mil.ln.ncos.cmmn.service.CmmnService;
import mil.ln.ncos.cmmn.util.DateUtil;
import mil.ln.ncos.cmmn.util.JsonUtil;
import mil.ln.ncos.cmmn.util.ScpDbUtil;

@Slf4j
@RequiredArgsConstructor
@Service
public class TcpOutboundServiceImpl implements TcpOutboudService {

	private final TcpGateway tcpGateway;

	private final CmmnService cmmnService;
	
	@Value("${spring.profiles.active}") 
	private String activeProfile;
	
	
	@Value("${udp.server.port}")
    private int port;
	
	@Value("${udp.server.host}")
	private String host;
	
	
	@Value("${prodMode}") 
	private String prodMode;
	
	@Value("${cryptoMode}")
	private String cryptoMode;

	@Override
	public void saveTransmitData() throws Exception {
		
		if(prodMode.equals("Y") && activeProfile.indexOf("land") == -1 && activeProfile.indexOf("Land") == -1
				&& activeProfile.indexOf("hmm") == -1 && activeProfile.indexOf("Hmm") == -1) {
			Map<String, Object> param = new HashMap<String, Object>();
			Map<String, Object> transmitData = cmmnService.getTransmitDataByJob(param);
			log.debug("transmitData:{}",transmitData);
			if(null != transmitData) {
				param.put("threatId", transmitData.get("threatId"));
				cmmnService.saveTransmitData(param);
			}
		}
		
	}

	@Override
	public void sendHeartBeat() throws Exception {
		
		if(prodMode.equals("Y") && activeProfile.indexOf("land") == -1 && activeProfile.indexOf("Land") == -1) {
			String message = null;
			try {
			Map<String, Object> satelliteInfo = cmmnService.getSatelliteTransByJob(null);
			int delay = Integer.parseInt(String.valueOf(satelliteInfo.get("systemOpStatusDelay")));
			if (delay > 5) {
				delay = delay - 5;
			} else {
				delay = 5;
			}
			Thread.sleep(delay);
			if(activeProfile.indexOf("hmm") > -1 || activeProfile.indexOf("Hmm") > -1) {
				log.debug("tcp heartbeat..................");
				long cscCnt = cmmnService.getCscStatusByJob();
				StringBuffer sb = new StringBuffer();
				sb.append("1").append("|");
				sb.append(satelliteInfo.get("shipId")).append("|");
				sb.append(satelliteInfo.get("unitId")).append("|");
				if (cscCnt > 0) {
					sb.append("1");
				} else {
					sb.append("2");
				}
				message = sb.toString();
				log.debug("sendHeartBeat:{}", message);
				tcpGateway.send(message.getBytes());
			}
			else {
				log.debug("udp heartbeat..................");
				Map<String,Object> param = new HashMap();
				param.put("messageType", "1");
				Map<String,Object> transmitData = cmmnService.getNavyTransmitDataByJob(param);		
				if(null != transmitData && transmitData.containsKey("srcData") && null != transmitData.get("srcData")) {
					StringBuffer sb = new StringBuffer();
					sb.append("1").append("|");
					sb.append(satelliteInfo.get("shipId")).append("|");
					sb.append(satelliteInfo.get("unitId")).append("|");
					String srcData = String.valueOf(transmitData.get("srcData"));
					Map<String,Object> srcMap = JsonUtil.fromJsonStrToMap(srcData);
					if(srcMap.get("normal").equals("1")) {
						sb.append("1");
					}
					else {
						sb.append("2");
					}
					message = sb.toString();
					log.debug("sendHeartBeat:{}", message);
		        	UnicastSendingMessageHandler handler = new UnicastSendingMessageHandler(host, port);
		        	handler.handleMessage(MessageBuilder.withPayload(message).build());
					//byte[] responseBytes = tcpGateway.send(message.getBytes());
					transmitData.put("srcBytes", message.getBytes().length);
					cmmnService.saveTransmitData(transmitData);
					
				}
				else {
					log.debug("heartbeat 강제 전송");
					StringBuffer sb = new StringBuffer();
					sb.append("1").append("|");
					sb.append(satelliteInfo.get("shipId")).append("|");
					sb.append(satelliteInfo.get("unitId")).append("|");
					sb.append("1");
					message = sb.toString();
					UnicastSendingMessageHandler handler = new UnicastSendingMessageHandler(host, port);
		        	handler.handleMessage(MessageBuilder.withPayload(message).build());
				}
			
				
			}
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		// log.info("Receive response: {}", response);
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public void sendThreatInfo() throws Exception {
		
		if(prodMode.equals("Y") && activeProfile.indexOf("land") == -1 && activeProfile.indexOf("Land") == -1) {
			String message = null;
			Map<String, Object> satelliteInfo = cmmnService.getSatelliteTransByJob(null);
			if(activeProfile.indexOf("hmm") > -1 || activeProfile.indexOf("Hmm") > -1) {  //민수
				Map<String,Object> param = new HashMap();
				Map<String, Object> transmitData = cmmnService.getTransmitDataByJob(param);
				if(transmitData != null) {
					StringBuffer sb = new StringBuffer();
					
					sb.append("2").append("|");
					sb.append(satelliteInfo.get("shipId")).append("|");
					sb.append(satelliteInfo.get("unitId")).append("|");
					sb.append(transmitData.get("detectionTime")).append("|");
		
					boolean srcIp = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("srcIp")));
					sb.append(srcIp?transmitData.get("srcIp"):"").append("|");
					boolean dstIp = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("dstIp")));
					sb.append(dstIp?transmitData.get("dstIp"):"").append("|");
					boolean srcPort = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("srcPort")));
					sb.append(srcPort?transmitData.get("srcPort"):"").append("|");
					boolean dstPort = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("dstPort")));
					sb.append(dstPort?transmitData.get("dstPort"):"").append("|");
					boolean protocol = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("protocol")));
					sb.append(protocol?transmitData.get("protocol"):"").append("|");
					boolean payloadSize = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("payloadSize")));
					sb.append(payloadSize?transmitData.get("payloadSize"):"").append("|");
					if(transmitData.get("fragmentation") instanceof Boolean) {
						boolean fragmentationSet = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("fragmentation")));
						boolean fragmentation = Boolean.parseBoolean(String.valueOf(transmitData.get("fragmentation")));
						sb.append(fragmentationSet?(fragmentation ? "1":"0"):"").append("|");
						
					}
					else {
						sb.append(transmitData.get("fragmentation")).append("|");
					}
					boolean fragmentId = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("fragmentId")));
					sb.append(fragmentId?"0":"").append("|");
					//sb.append(transmitData.get("fragmentId")).append("|");
					boolean detectionThreatName = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("detectionThreatName")));
					sb.append(detectionThreatName?transmitData.get("detectionThreatName"):"").append("|");
					boolean threatDetectionMethod = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("threatDetectionMethod")));
					sb.append(threatDetectionMethod?transmitData.get("threatDetectionMethod"):"").append("|");
					boolean threatImportance = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("threatImportance")));
					sb.append(threatImportance?transmitData.get("threatImportance"):"").append("|");
					boolean payload = Boolean.parseBoolean(String.valueOf(satelliteInfo.get("payload")));
					String payloadContent = "0";
					if(payload) {
						StringBuffer sbf = new StringBuffer();
						BufferedReader reader = null;
					    try {
							if(transmitData.containsKey("payload") && transmitData.get("payload") != null && !transmitData.get("payload").equals("")) {
								
								String payloadPath = String.valueOf(transmitData.get("payload"));
								File payloadFile = new File(payloadPath);
								if(payloadFile.exists() && payloadFile.isFile()) {
									reader = new BufferedReader(new FileReader(payloadPath));
								    String str;
							        while ((str = reader.readLine()) != null) {
							        	sbf.append(str);
							        }
							        payloadContent = sbf.toString();
							        reader.close();
								}
								else {
									log.error(String.format("payload file: \"%s\" is not found", payloadPath));
								}
								
							}
					    }catch(IOException ie) {
					    	log.error(ie.getMessage());
					    }
					    finally {
					    	if(reader != null) reader.close();	    	
					    }
					}
					sb.append(payload?payloadContent:"0");
		
					message = sb.toString();
					log.debug("sendThreatInfo:{}", message);
					byte[] responseBytes = tcpGateway.send(message.getBytes());
					log.debug("message byte:{}",responseBytes);
					//Map<String, Object> param = new HashMap();
					param.put("detectionTime", transmitData.get("detectionTime"));
					param.put("threatId", transmitData.get("threatId"));
					//param.put("dataId", transmitData.get("dataId"));
					param.put("srcBytes", message.getBytes().length);
					cmmnService.saveTransmitData(param);
				}
			}
			else {
				Map<String,Object> param = new HashMap();
				param.put("messageType", "2");
				Map<String,Object> transmitData = cmmnService.getNavyTransmitDataByJob(param);
				if(null != transmitData && transmitData.containsKey("srcData") && null != transmitData.get("srcData")) {
					StringBuffer sb = new StringBuffer();
					////2|1|1|null||||||||||||0
					sb.append("2").append("|");
					sb.append(satelliteInfo.get("shipId")).append("|");
					sb.append(satelliteInfo.get("unitId")).append("|");
					String srcData = String.valueOf(transmitData.get("srcData"));
					Map<String,Object> srDataMap = JsonUtil.fromJsonStrToMap(srcData);
					log.debug("srcDataMap:{}",srDataMap);
					sb.append(DateUtil.getUnxiDate(String.valueOf(srDataMap.get("detection_time")),null)).append("|");
					
					boolean srcIp = srDataMap.containsKey("src_ip");
					sb.append(srcIp?srDataMap.get("src_ip"):"").append("|");
					boolean dstIp = srDataMap.containsKey("dst_ip");
					sb.append(dstIp?srDataMap.get("dst_ip"):"").append("|");
					boolean srcPort = srDataMap.containsKey("src_port");
					sb.append(srcPort?srDataMap.get("src_port"):"").append("|");
					boolean dstPort = srDataMap.containsKey("dst_port");
					sb.append(dstPort?srDataMap.get("dst_port"):"").append("|");
					boolean protocol = srDataMap.containsKey("protocol");
					sb.append(protocol?srDataMap.get("protocol"):"").append("|");
					boolean payloadSize = srDataMap.containsKey("payload_size");
					sb.append(payloadSize?srDataMap.get("payload_size"):"").append("|");
					boolean fragmentation = srDataMap.containsKey("fragmentation");
					sb.append(fragmentation?srDataMap.get("fragmentation"):"").append("|");
					boolean fragmentId = srDataMap.containsKey("payload_size");
					sb.append(fragmentId?"0":"").append("|");
					boolean detectionThreatName = srDataMap.containsKey("detection_threat_name");
					sb.append(detectionThreatName?srDataMap.get("detection_threat_name"):"").append("|");
					boolean threatDetectionMethod = srDataMap.containsKey("threat_detection_method");
					sb.append(threatDetectionMethod?srDataMap.get("threat_detection_method"):"").append("|");
					boolean threatImportance = srDataMap.containsKey("threat_importance");
					sb.append(threatImportance?srDataMap.get("threat_importance"):"").append("|");
					boolean payload = srDataMap.containsKey("payload");
					String payloadContent = "0";
					if(payload) {
						StringBuffer sbf = new StringBuffer();
						BufferedReader reader = null;
					    try {
							if(srDataMap.containsKey("payload") && srDataMap.get("payload") != null && !srDataMap.get("payload").equals("")) {
								String payloadPath = String.valueOf(srDataMap.get("payload"));
								if(cryptoMode.equals("Y")) {
									payloadPath = ScpDbUtil.scpDec(String.valueOf(srDataMap.get("payload")));
								}
								
								File payloadFile = new File(payloadPath);
								if(payloadFile.exists() && payloadFile.isFile()) {
									reader = new BufferedReader(new FileReader(payloadPath));
								    String str;
							        while ((str = reader.readLine()) != null) {
							        	sbf.append(str);
							        }
							        payloadContent = sbf.toString();
							        reader.close();
								}
								else {
									log.error(String.format("payload file: \"%s\" is not found", payloadPath));
								}
							}
					    }catch(IOException ie) {
					    	log.error(ie.getMessage());
					    }
					    finally {
					    	if(reader != null) reader.close();	    	
					    }
					}
					sb.append(payload?payloadContent:"0");
		
					message = sb.toString();
					log.debug("sendThreatInfo:{}", message);
					UnicastSendingMessageHandler handler = new UnicastSendingMessageHandler(host, port);
		        	handler.handleMessage(MessageBuilder.withPayload(message).build());
					//Map<String, Object> param = new HashMap();
					param.put("detectionTime", srDataMap.get("detection_time"));
					//param.put("threatId", transmitData.get("threatId"));
					param.put("dataId", transmitData.get("dataId"));
					param.put("srcBytes", message.getBytes().length);
					cmmnService.saveTransmitData(param);
				}
			}
			
		}
		
       
	}

	@Override
	public void sendAssertInfo() throws Exception {
		if(prodMode.equals("Y") && activeProfile.indexOf("land") == -1 && activeProfile.indexOf("Land") == -1) {
			String message = null;
			Map<String, Object> satelliteInfo = cmmnService.getSatelliteTransByJob(null);
			if(activeProfile.indexOf("hmm") == -1 && activeProfile.indexOf("Hmm") == -1) {  //해군
				Map<String,Object> param = new HashMap();
				param.put("messageType", "3");
				Map<String,Object> transmitData = cmmnService.getNavyTransmitDataByJob(param);
				if(null != transmitData && transmitData.containsKey("srcData") && null != transmitData.get("srcData")) {
					StringBuffer sb = new StringBuffer();
					sb.append("3").append("|");
					sb.append(satelliteInfo.get("shipId")).append("|");
					sb.append(satelliteInfo.get("unitId")).append("|");
					String srcData = String.valueOf(transmitData.get("srcData"));
					Map<String,Object> srcMap = JsonUtil.fromJsonStrToMap(srcData);
					if(srcMap.get("normal").equals("1")) {
						sb.append("1");
					}
					else {
						sb.append("2");
					}
					message = sb.toString();
					log.debug("sendHeartBeat:{}", message);
					UnicastSendingMessageHandler handler = new UnicastSendingMessageHandler(host, port);
		        	handler.handleMessage(MessageBuilder.withPayload(message).build());
					transmitData.put("srcBytes", message.getBytes().length);
					cmmnService.saveTransmitData(transmitData);
					
				}
			}
		}
		// TODO Auto-generated method stub

	}

}
