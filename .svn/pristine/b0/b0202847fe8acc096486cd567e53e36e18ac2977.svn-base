<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
	  xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	  layout:decorate="~{th/cmmn/layout}">
<head>
<title>육상메인화면</title>
<style>
.grid line {
  stroke: lightgrey;
  stroke-opacity: 0.7;
}
</style>
<script type="text/javascript" src="/js/d3.js"></script>
<!-- <script src="https://d3js.org/d3.v7.min.js"></script> -->
<script type="text/javascript" src="/js/topojson.js"></script>
</head>
<th:block layout:fragment="content">
<div class="container-wide">
	<div class="container">
		<div class="grid-row">
			<div class="item-box col-3">
				<div class="inner" style="overflow-y:auto; height:700px;">
					<h4 class="item-title"><span class="iconWrapB icon_07_01"></span><strong>함정별 위협 상태</strong></h4>
					<div class="items">
					 <!--트리메뉴 들어가는 자리 시작-->
					<div class="treeBoxAsset">
					</div>
				    <!--트리메뉴 들어가는 자리 끝-->
					</div>
				</div>
			</div>
			<div class="item-box col-6">
				<div class="inner"> 
					<div class="items"> 
					    <div id="map-wrapper" class="map-wrapper" style="width: 1200px; height: 670px; padding:5px"></div>
					</div>
					<!-- <div class="dim-layer">
						<div class="dimBg"></div>
						<div id="testscenario" class="pop-layer small"> 
							<div class="Popup-title">
								<h3><span class="iconWrapB icon_07_04"></span><strong>1함대 함정 상태</strong></h3>
								<button class="icon-close">닫기</button>
							</div>
							<div class="Popup-container"> 
								<div class="Popup-contents"> 1212 </div>
							</div>
						</div>
					</div> -->
				</div>
			</div>
			<div class="item-box col-3">
				<div class="inner" style="overflow-y:auto; height:700px;">
					<h4 class="item-title"><span class="iconWrapB icon_07_02"></span><strong>함정별 자산 상태</strong></h4>
					<div class="items"> 
					<!--트리메뉴 들어가는 자리 시작-->
					<div class="treeBox">
					</div>
				    <!--트리메뉴 들어가는 자리 끝-->
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<div class="items"  style="float:right">
						<div class="schwrap">
								<button class="btn medium darkblue initBtn">
									<span class="iconBtn icon_reset"></span><strong>초기화</strong>
								</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_07_03"></span><strong>위협 발생 목록</strong></h4>
					<div class="items"> 
						<!--table//-->
						<div class="tablewrap">
							<table>
								<thead class="tHead">
								</thead>
								<tbody class="tBody">
								</tbody>
							</table>
						</div>
						<!--//table--> 
						<!--pagination//-->
						<div class="page_wrap">
							<div class="page_nation"></div>
						</div>
						<!--//pagination--> 
					</div>
				</div>
			</div>
		</div>
		<!--//Grid--> 
	</div>
</div>
<!--함대 함정 상태 modal popup//-->
<div id="testscenario" class="pop-layer sssmall"> 
	<div class="Popup-title">
		<h3><span class="iconWrapB icon_07_04"></span><strong></strong></h3>
		<button class="icon-close">닫기</button>
	</div>
	<div class="Popup-container" style="padding: 5px"> 
		<div class="Popup-contents">
			<ul class="warshipWrap clfix">
			</ul>
		</div>
	</div>
</div>
<!--//modal popup--> 
<script th:inline="javascript"> 
	let xyList = new Array();
	
	let xy1 = { id : 'xy1'
        , lat : 37.75000  
        , lon : 128.88333
        , img : '/img/icon/navy_pin_blue.svg'
        , label : '1함대'
        , color : '#5387c0'
        /*
        , ships : [{nm: '광개토대왕',threatYn: 'Y'}
                  ,{nm: '양만춘함',threatYn: 'N'}
                  ,{nm: '현시혁함',threatYn: 'N'}
                  ]
	      */
    };
	let xy2 = { id : 'xy2'
        , lat : 37.26389  
        , lon : 127.02861
        , img : '/img/icon/navy_pin_green.svg'
        , label : '2함대'
        , color : '#ff9900'
    };
	let xy3 = { id : 'xy3'
        , lat : 34.8118351  
        , lon : 126.3921664
        , img : '/img/icon/navy_pin_red.svg'
        , label : '3함대'
        , color : '#eb6276'
    };
	let mapWarpperCss =  '';
	xyList.push(xy1);
	xyList.push(xy2);
	xyList.push(xy3);
	window.addEventListener('DOMContentLoaded', () => {
		ncos.schMode = 'auto';
		if(document.body.clientWidth === 1920 ){
			document.getElementById("map-wrapper").style.width = '880px';
			document.getElementById("map-wrapper").style.height = '478px';
		}
		else{
			document.getElementById("map-wrapper").style.width = '1190px';
			document.getElementById("map-wrapper").style.height = '630px';
		}
		let mapWarpperCss = document.getElementById("map-wrapper").cssText;
		init();
		initWhiteList();
		ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//50초
		document.querySelector('.initBtn').addEventListener('click',e => {
	    	e.preventDefault();
	    	ncos.initBtn = true;
	    	//intervalFunc();
			ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//50초
	    });	      
	});
	
	const intervalFunc = () => {
		searchFunc();
	    fetch("/json/world.topo.json")
		.then(response => {
			
		    return response.json();
		})
		.then(jsondata => {
			drawMap(jsondata,xyList);
		});
	}
	
	const init = () => {
	    	const headColumns = [{data_id:"idx",label:"NO",width:"0px"}
	                            ,{data_id:"detectionTime",label:"탐지시간" ,data_dateFrmt:"yy-mm-dd hh:mi:ss"}
			     	            ,{data_id:"unitId",label:"부대명",data_grpCd:"COUT"}
					            ,{data_id:"shipId",label:"함명",data_grpCd:"COSH"} 
					            ,{data_id:"srcIp",label:"송신IP"}
					            ,{data_id:"dstIp",label:"수신IP"}
					            ,{data_id:"srcPort",label:"송신Port"}
					            ,{data_id:"dstPort",label:"수신Port"}
					            ,{data_id:"threatDetectionMethod",label:"탐지방식", data_grpCd:"THTY"}
					            ,{data_id:"detectionThreatName",label:"탐지 위험명"}
					            ,{data_id:"analysisResult",label:"정오탐판정",data_grpCd:"THRES"}
					            ,{data_id:"threatImportance",label: "위협중요도",data_grpCd:"THIM", data_class:"threat"}
					            ,{data_id:"detailBtn",label: "상세보기", data_cellType:"tdCCell" , data_btnNm:"상세보기"}
					           ];
		    gridInit(document.querySelector('.tablewrap'),headColumns);
		    pageInit(document.querySelector(".page_nation"),searchFunc,page.rowPerPage);
		    treeInit(document.querySelector('.treeBox'));
		    treeInit(document.querySelector('.treeBoxAsset'));
		    intervalFunc();
	}
	
	const searchFunc = (invoker) => {
    	pageSearch("/landIntro",document.querySelector(".tablewrap"),document.querySelector(".page_nation"),invoker,searchFunc,searchAfterFunc);
    }
    
    const searchAfterFunc = (appendData) => {
    	document.querySelector('.treeBox').innerHTML = '';
    	document.querySelector('.treeBoxAsset').innerHTML = '';
    	let vesselList = appendData.vesselList;
    	let shipList = appendData.shipList;
    	//console.log("appendData.vesselList:",appendData.vesselList);
    	let treejs1 = createInitTree(document.querySelector('.treeBox'),vesselList,false);
		if(vesselList != null && vesselList.length > 0){
			createTreeNoChk(vesselList,treejs1,null,'asset');
		}
    	let treejs2 = createInitTree(document.querySelector('.treeBoxAsset'),vesselList,false);
		if(vesselList != null && vesselList.length > 0){
			createTreeNoChk(vesselList,treejs2,null,'threat');
		}
		
		let shipList1 = new Array();
		let shipList2 = new Array();
		let shipList3 = new Array();
		
		for(let itm of shipList){
			//console.log(itm.idPath);
			let ids = itm.idPath.split(',');
			if(ids[0] == '1'){
				shipList1.push({nm: itm.affiliation,threatYn: itm.threatYn});
			}
			else if(ids[0] == '2'){
				shipList2.push({nm: itm.affiliation,threatYn: itm.threatYn});
			}
			else if(ids[0] == '3'){
				shipList3.push({nm: itm.affiliation,threatYn: itm.threatYn});
			}
		}
		for(let xy of xyList){
			if(xy.id == 'xy1'){
				xy.ships = shipList1;
			}
			else if(xy.id == 'xy2'){
				xy.ships = shipList2;
			}
			else if(xy.id == 'xy3'){
				xy.ships = shipList3;
			}
		}
		
		
		
		fetch("/json/world.topo.json")
		.then(response => {
			
		    return response.json();
		})
		.then(jsondata => {
			drawMap(jsondata,xyList);
		});
    }
    
    const detailFunc = (data) => {
    	console.log("data:",data);
    	searchWhiteList();
    }

    const drawMap = (data,obj) =>{
    	document.querySelector('.map-wrapper').innerHTML = '';
        const geojson = topojson.feature(data, data.objects.World_Countries__Generalized_); // World_Countries__Generalized_
        const center = d3.geoCentroid(geojson);

        let centered = undefined;

        // 현재의 브라우저의 크기 계산
        const divWidth = document.getElementById("map-wrapper").clientWidth;
        const divHeight = document.getElementById("map-wrapper").clientHeight;
        const width = divWidth;
        const height = divHeight;
        //const height = width * 1;

        // 지도를 그리기 위한 svg 생성
        const svg = d3
        .select('.map-wrapper')
        .append('svg')
        .attr('width', width)
        .attr('height', height)
        .style("font", "14px times");
        
        const background = svg.append('rect')
        .attr('width', width)
        .attr('height', height)
        .attr('fill','#0f0f0f');

         // 지도가 그려지는 그래픽 노드(g) 생성
        const g = svg.append('g');
        const lineLayer = g.append('g').classed('line-layer', true);
        const effectLayer = g.append('g').classed('effect-layer', true);
         // 지도가 그려지는 그래픽 노드
        const mapLayer = g.append('g').classed('map-layer', true);
         // 선박이 그려지는 그래픽 노드
        const shipLayer = g.append('g').classed('ship-layer', true);
         // 지도의 출력 방법을 선택(메로카토르)
        let projection = d3.geoMercator()
        .scale(1)
        .translate([0, 0]); 
     
         // svg 그림의 크기에 따라 출력될 지도의 크기를 다시 계산
        const path = d3.geoPath().projection(projection);
        const bounds = path.bounds(geojson);
        const widthScale = (bounds[1][0] - bounds[0][0]) / width; 
        const heightScale = (bounds[1][1] - bounds[0][1]) / height; 
        let scale = 55 / Math.max(widthScale, heightScale);   //55
        if(document.body.clientWidth === 1920 ){
        	scale = 53 / Math.max(widthScale, heightScale);   //55
		}
        //const scale = 1 / Math.max(widthScale, heightScale);
        const xoffset = width/2 - scale * (bounds[1][0] + bounds[0][0]) /2 + 0; 
        const yoffset = height/2 - scale * (bounds[1][1] + bounds[0][1])/2 + 0; 
        console.log("xoffset:",xoffset,"yoffset:",yoffset);
        let  offset = [-11600, 4000];   //
        if(document.body.clientWidth === 1920 ){
        	offset = [-8460, 2940];   //
		}
        //const offset = [xoffset, yoffset];
        projection.scale(scale).translate(offset);

        let xs = new Array(),
            ys = new Array();
        
        for(let i=0;i*150<width;i++){
        	xs.push(i*150);
        }
        for(let i=0;i*150<height;i++){
        	ys.push(i*150);
        }

        mapLayer
        .selectAll('path')
        //.data(geojson)
        .data(geojson.features)  //data.objects["municipalities-geo"]).features
        .enter().append('path') 
        .attr('d', path)
        .attr('stroke', 'gray')
        .attr('fill', '#182a43')
        .attr('vector-effect', 'non-scaling-stroke');
        
      /*   mapLayer.selectAll('rect').data(ys)
        .enter().append('line')
        .style("stroke", "lightgray")
        .style("stroke-width", 2)
        .attr("x1", 0)
        .attr("y1", (d)=> {console.log(d);return d;})
        .attr("x2", 1200)
        .attr("y2", (d)=> {return d;})
        .style("opacity", 0.2);
      
 */
         let doList = new Array();
		 let ullenug = { lat : 37.504444444444445  , lon : 130.8608333333332, w: '18px', h:'18px', img : '/img/ulleng.svg'}; //울릉도
		 let dokdo = { lat : 37.23833333333334  , lon : 131.8727777777778 ,  w: '4px', h:'4px' , img : '/img/ulleng.svg'}; //독도
		 let fontSize = '14px',
		     iconWidth = '30px',
		     iconHeight = '30px',
		     xPad = 0.18,
		     yPad = 0.4;
		 if(document.body.clientWidth <= 1920 ){
			 ullenug.w = '13px';
			 ullenug.h = '13px';
			 dokdo.w = '2.5px';
			 dokdo.h = '2.5px';
			 fontSize = '12px';
		     iconWidth = '25px';
		     iconHeight = '25px';
		     xPad = 0.17;
		     yPad = 0.48;
		 }
		 doList.push(ullenug);
		 doList.push(dokdo);
		 mapLayer
		 .selectAll('svg')
		 .data(doList)
		 .enter()  
		 .append("svg:image")
         .attr("xlink:href", (d)=> {return d.img;})
		 .attr("width", (d)=> {return d.w;})
         .attr("height", (d)=> {return d.h;})
         .attr("x", (d)=> projection([d.lon, d.lat])[0])
         .attr("y", (d)=> { let y = projection([d.lon, d.lat])[1];  if(isNaN(y)){y = 0}; return y;});
         
          shipLayer
         .selectAll('svg')
         .data(obj)
         .enter()  
         .append("svg:image")
         .attr("xlink:href", (d)=> {return d.img;})
         .attr("width", iconWidth)
         .attr("height", iconHeight)
         .attr('cursor','pointer')
         .attr("id", (d)=> {return d.id;})
         .attr("x", (d)=> projection([d.lon, d.lat])[0])
         .attr("y", (d)=> { let y = projection([d.lon, d.lat])[1];  if(isNaN(y)){y = 0}; return y;})
 	     .on('click', (e,i) => {
 	    	 let popTitle = document.querySelector('#testscenario').querySelector('strong');
 	    	 popTitle.innerHTML = '';
 	    	 popTitle.append(i.label+' 함정 상태');
 	    	 let ul = document.querySelector('#testscenario').querySelector('.warshipWrap');
 	    	 ul.innerHTML = '';
 	    	 if(i.ships.length > 0){
 	    		 i.ships.forEach((ship,index) => {
 	    			 let li = document.createElement('li');
 	    			 let span = document.createElement('span');
 	    			 let strong = document.createElement('strong');
 	    			 strong.append(ship.nm);
 	    			 span.classList.add('iconWrapShip');
 	    			 if(ship.threatYn === 'Y'){
 	    				span.classList.add('warship_red');
 	    				strong.classList.add('red');
 	    			 }
 	    			 else{
 	    				span.classList.add('warship_green');
 	    				strong.classList.add('green');
 	    			 }
 	    			 li.appendChild(span);
 	    			 li.appendChild(strong);
 	    			 ul.appendChild(li);
 	    		 });
 	    	 }
 	    	 showLayer('#testscenario',e.clientX,e.clientY);
 	     })
 	     .on('mouseover', (e,i) => {
 	     })
 	     .on('mouseout', (e,i) => {
 	     });
  
		 const text = shipLayer.selectAll("text")
		 .data(obj)
		 .enter()
		 .append("text")
		 .text(function(d) {
			 return d.label;
		 })
		 .attr("x", (d)=> projection([d.lon+xPad, d.lat+xPad])[0])
         .attr("y", (d)=> { let y = projection([d.lon-yPad, d.lat-yPad])[1];  if(isNaN(y)){y = 0};return y;})
		 .attr("font-family", "sans-serif")
		 .attr("font-size", fontSize)
		 .attr("fill", (d)=> {return d.color;})
		 .attr("text-anchor", "middle"); 
          
          svg.call(d3.zoom().on("zoom", function (e) {
        	  mapLayer.attr("transform", d3.zoomTransform(this));
	          shipLayer.attr("transform", d3.zoomTransform(this));
	          //lineLayer.attr("transform", d3.zoomTransform(this));
 		  }))
 		  .on("wheel", e => e.preventDefault());
          
    }
    
    document.getElementById("map-wrapper").addEventListener('mouseover',(e) => {
    	//e.target.style.cssText = '';
    	//e.target.style.cssText = mapWarpperCss + 'cursor:move;';
    });

</script>
</th:block>
</html>