package mil.ln.ncos.udp;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import mil.ln.ncos.client.service.MessageService;
import mil.ln.ncos.dao.DAO;

@Service
@RequiredArgsConstructor
@Slf4j
public class UdpOutboundService {
	
	private final DAO dao;
	
	@Value("${spring.profiles.active}") 
	private String activeProfile;
	
	@Value("${tcp.server.port}")
    private int port;
	@Value("${tcp.server.host}")
	private String host;
	
	@Value("${prodMode}") 
	private String prodMode;
	
	private final MessageService messageService;


	public void send(int messageType){
		if(prodMode.equals("Y") && activeProfile.indexOf("land") == -1 && activeProfile.indexOf("Land") == -1) {
			try {
			if(activeProfile.indexOf("hmm") == -1 && activeProfile.indexOf("Hmm") == -1) {
				switch(messageType) {
					case 1: messageService.sendHeartBeat();
					        break;
					case 2: messageService.sendThreatInfo();
					        break;
					case 3: messageService.sendAssertInfo();
						    break;
					default:break;
				}
			}
			}catch(Exception e) {
				e.printStackTrace();
			}
			
			
			/*
    		Map<String,Object> msg = new HashMap<>();
    		msg.put("id", "001");
    		msg.put("data", "hello");
    		Gson gson = new Gson();
    		String serializeString = gson.toJson(msg);
    		log.debug("serializeString:{}",serializeString);
    		try {
    			//InetAddress address = InetAddress.getByName(host);
        		//InetAddress address = InetAddress.getByName("lnsystem.iptime.org");
        	    log.debug("Udp Server Host:{}",host,",Port:{}",port);
        		UnicastSendingMessageHandler handler = new UnicastSendingMessageHandler(host, port);
        		handler.handleMessage(MessageBuilder.withPayload(serializeString).build());
    		}catch(Exception e) {
    			log.error("udp send error:{}",e.getStackTrace().toString());
    		}
    		*/
    		
    	}
    	
    }

}
