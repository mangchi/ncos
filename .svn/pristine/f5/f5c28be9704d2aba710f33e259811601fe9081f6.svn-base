<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Cmmn">

  <!-- code -->
  <select id="selectCode" parameterType="CodeVo" resultType="CodeVo">
      SELECT *
      FROM
	      (SELECT CODE_ID
	            , CONCAT(MAINGROUP,SUBGROUP) AS GRP_CD
	            , CODE AS CD
	            , CODE_KR AS CD_NM
	            , SORT
	        FROM code_info
	        WHERE USE_FLAG = 1
	        ) A
       ORDER BY GRP_CD,CD ,SORT
  </select>
  
  <select id="selectUserCodeList" parameterType="HashMap" resultType="CmmnMap">
          SELECT A.ACCOUNT_ID CD
              , USERNAME CD_NM
        FROM user_account A
        JOIN account_status B
        ON A.ACCOUNT_ID = B.ACCOUNT_ID
        AND B.ACCOUNT_ACTIVATION = 1
  </select>

  <select id="selectEquipList" parameterType="HashMap" resultType="CmmnMap">
	     SELECT *
	     FROM
	     (SELECT 0 AS ID, NULL AS UPPER_ID, '네트워크 장비' AS CLASS_NM
	     UNION ALL
	     SELECT CODE ID, 0 UPPER_ID, CODE_KR CLASS_NM
	       FROM code_info
	     WHERE MAINGROUP = 'AS'
	     AND SUBGROUP = 'SC'
	     ) A
	     ORDER BY ID DESC
  </select>


  <select id="selectManagerList" parameterType="HashMap" resultType="CmmnMap">

        SELECT MANAGER CD
             , MANAGER CD_NM
        FROM network_asset_info
        GROUP BY MANAGER
        ORDER BY MANAGER
  </select>
  
  <select id="selectAccountSetting" parameterType="UserVo" resultType="CmmnMap">

        SELECT ACCOUNT_ID
             , ALARM_STATUS
             , WARNING_STATUS
             , SESSION_CONTROL_STATUS
             , ALARM_LEVEL
             , WARNING_LEVEL
        FROM account_setting
        WHERE ACCOUNT_ID = #{accountId}
  </select>
  

  <select id="selectEquipStatusList" parameterType="HashMap" resultType="CmmnMap">
	    SELECT *
	     FROM
		     (SELECT '0' AS ID
			       , NULL AS UPPER_ID
					 , '네트워크 장비' AS CLASS_NM
					 , 0 IS_SHIP
					 , NULL ASSET_STATUS
					 , NULL COUNT
		     UNION ALL
		     SELECT AFFILIATION_ID ID
		          , CASE WHEN BELONGPARENTID IS NULL THEN '0' ELSE BELONGPARENTID END  UPPER_ID
		          , affiliation AS CLASS_NM
		          , IS_SHIP
		          , ASSET_STATUS
		          , COUNT
		    FROM v_tree_data
		     ) A
	     ORDER BY ID DESC
  </select>

  <select id="selectShipStatusList" parameterType="HashMap" resultType="CmmnMap">
		    WITH RECURSIVE V_TREE AS (
              SELECT  AFFILIATION_ID
		               , BELONGPARENTID
		               , affiliation
		               , cast(AFFILIATION_ID AS CHAR(100) CHARACTER SET UTF8) AS ID_PATH
		               , IS_SHIP
		               , ASSET_STATUS
		               , ASSET_STATUS_ID
		               , COUNT

		         FROM v_tree_data
					WHERE BELONGPARENTID IS NULL
		         UNION ALL
		         SELECT  P.AFFILIATION_ID
					   , P.BELONGPARENTID
		               , P.affiliation
		               , CONCAT(C.id_path,',',P.AFFILIATION_ID) AS ID_PATH
		               , P.IS_SHIP
		               , P.ASSET_STATUS
		               , p.ASSET_STATUS_ID
		               , P.COUNT
		         FROM v_tree_data P
		         INNER JOIN V_TREE C ON C.AFFILIATION_ID = P.BELONGPARENTID
		   )
		   SELECT  AFFILIATION_ID
		        , affiliation
		        , ID_PATH
		        , ASSET_STATUS
		        , COUNT
		        , CASE WHEN /*LENGTH(TRIM(ASSET_STATUS)) &gt; 0*/ ASSET_STATUS_ID = 1  OR COUNT &gt; 0 THEN 'Y' ELSE 'N' END THREAT_YN
		   FROM V_TREE
		   WHERE IS_SHIP = 1
		   ORDER BY ID_PATH
  </select>



   <select id="selectLinkInfoList" parameterType="HashMap" resultType="CmmnMap">
         SELECT * FROM 
	     (SELECT LINK_ID ID
	          , CASE WHEN UPPER_LINK_ID = 0 THEN NULL ELSE UPPER_LINK_ID END UPPER_ID
	          , A.ASSET_ID
              , B.ASSET_NAME  CLASS_NM
	          , LINK_TYPE
	          , C.CODE_KR
	       FROM link_info A
	       INNER JOIN network_asset_info B
	       ON A.ASSET_ID = B.ASSET_ID
	       LEFT JOIN  code_info C
	       ON  B.SMALL_CATEGORY = C.CODE
	       AND C.MAINGROUP = 'AS'
	       AND C.SUBGROUP = 'SC') A
	       WHERE A.CLASS_NM IS NOT NULL
	       ORDER BY ID DESC
  </select>

  <select id="selectZoneList" parameterType="HashMap" resultType="CmmnMap">
       SELECT ZONE_ID CD
            , ZONE_NAME CD_NM
        FROM zone_location
       WHERE ZONE_NAME IS NOT NULL
       ORDER BY ZONE_ID
  </select>

  <select id="selectWhiteList" parameterType="HashMap" resultType="CmmnMap">

        SELECT POLICY_ID AS ID
             , POLICY_NAME
             , SRC_IP
             , SRC_MASK
             , DST_IP
             , DST_MASK
             , SRC_START_PORT
             , SRC_END_PORT
             , DST_START_PORT
             , DST_END_PORT
             , PROTOCOL
             , POLICY
        FROM whitelist_policy
        ORDER BY POLICY_ID DESC


  </select>


   <select id="selectWatchThreatList" parameterType="HashMap" resultType="CmmnMap">
    	SELECT A.DETECTION_TIME
    	     , A.UNIT_ID
    	     , A.SHIP_ID
    	     , A.DETECTION_THREAT_NAME
    	     , A.THREAT_DETECTION_METHOD
    	     , A.THREAT_IMPORTANCE
    	     , A.THREAT_ID
        FROM threat_info A
        <where>
         AND A.DETECTION_TIME > IFNULL((SELECT MAX(CONFIRM_TIME) FROM alarm_check WHERE ACCOUNT_ID = #{accountId} AND EVENT_ID = 2)
                                       , (SELECT LAST_SUCCESS_ACCESS_DATE FROM account_status WHERE ACCOUNT_ID = #{accountId}))
        <if test='alarmSch != null and alarmSch.equals("Y") and alarmLevel != null'>
	        <choose>
			<when test='alarmLevel == 9'>
			AND A.THREAT_IMPORTANCE IN (1,3,5)
			</when>
			<when test='alarmLevel == 8'>
			AND A.THREAT_IMPORTANCE IN (3,5)
			</when>
			<when test='alarmLevel == 6'>
			AND A.THREAT_IMPORTANCE IN (1,5)
			</when>
			<when test='alarmLevel == 4'>
			AND A.THREAT_IMPORTANCE IN (1,3)
			</when>
			<otherwise>
			AND A.THREAT_IMPORTANCE = #{alarmLevel}
			</otherwise>
			</choose>
		</if>
		<if test='warningSch != null and warningSch.equals("Y") and warningLevel != null'>
	        <choose>
			<when test='warningLevel == 9'>
			AND A.THREAT_IMPORTANCE IN (1,3,5)
			</when>
			<when test='warningLevel == 8'>
			AND A.THREAT_IMPORTANCE IN (3,5)
			</when>
			<when test='warningLevel == 6'>
			AND A.THREAT_IMPORTANCE IN (1,5)
			</when>
			<when test='warningLevel == 4'>
			AND A.THREAT_IMPORTANCE IN (1,3)
			</when>
			<otherwise>
			AND A.THREAT_IMPORTANCE = #{warningLevel}
			</otherwise>
			</choose>
		</if>
        AND  NOT EXISTS (SELECT B.THREAT_ID FROM threat_analysis B WHERE B.THREAT_ID = A.THREAT_ID)
        </where>
        ORDER BY A.THREAT_ID DESC
        LIMIT 1
        <!--

        <if test='login != null and !login.equals("")'>
        LIMIT 1
        </if> -->
  </select>

   <select id="selectWatchAssetList" parameterType="map" resultType="CmmnMap">
    	SELECT A.DETECTION_TIME
    	     , B.SMALL_CATEGORY
    	     , C.statusText AS REASON_NAME
    	     , B.ASSET_ID
        FROM asset_status_info A
        INNER JOIN network_asset_info B
        ON A.SYSTEM_ID = B.SYSTEM_ID
        LEFT JOIN reason_v C
        ON    A.SYSTEM_ID = C.systemId AND A.REASON_ID = C.statusCode
		WHERE A.ASSET_STATUS != 2
         AND A.DETECTION_TIME > IFNULL((SELECT MAX(CONFIRM_TIME) FROM alarm_check WHERE ACCOUNT_ID = #{accountId} AND EVENT_ID = 1)
                                       , (SELECT LAST_SUCCESS_ACCESS_DATE FROM account_status WHERE ACCOUNT_ID = #{accountId}))

         <if test='alarmSch != null and alarmSch.equals("Y") and alarmLevel != null'>
        <choose>
		<when test='alarmLevel == 9'>
		AND 1 = 1
		</when>
		<when test='alarmLevel == 8'>
		AND (B.CONFIDENTIALITY_LEVEL > 1 OR B.INTEGRITY_LEVEL > 1 OR B.AVAILABILITY_LEVEL > 1)
		</when>
		<when test='alarmLevel == 6'>
		AND (B.CONFIDENTIALITY_LEVEL IN (1,5) OR B.INTEGRITY_LEVEL IN (1,5) OR B.AVAILABILITY_LEVEL IN (1,5))
		</when>
		<when test='alarmLevel == 4'>
		AND (B.CONFIDENTIALITY_LEVEL IN (1,3) OR B.INTEGRITY_LEVEL IN (1,3) OR B.AVAILABILITY_LEVEL IN (1,3))
		</when>
		<otherwise>
		AND (B.CONFIDENTIALITY_LEVEL = #{alarmLevel} OR B.INTEGRITY_LEVEL = #{alarmLevel} OR B.AVAILABILITY_LEVEL = #{alarmLevel})
		</otherwise>
		</choose>
		</if>
		<if test='warningSch != null and warningSch.equals("Y") and warningLevel != null'>
        <choose>
		<when test='alarmLevel == 9'>
		AND 1 = 1
		</when>
		<when test='alarmLevel == 8'>
		AND (B.CONFIDENTIALITY_LEVEL > 1 OR B.INTEGRITY_LEVEL > 1 OR B.AVAILABILITY_LEVEL > 1)
		</when>
		<when test='alarmLevel == 6'>
		AND (B.CONFIDENTIALITY_LEVEL IN (1,5) OR B.INTEGRITY_LEVEL IN (1,5) OR B.AVAILABILITY_LEVEL IN (1,5))
		</when>
		<when test='alarmLevel == 4'>
		AND (B.CONFIDENTIALITY_LEVEL IN (1,3) OR B.INTEGRITY_LEVEL IN (1,3) OR B.AVAILABILITY_LEVEL IN (1,3))
		</when>
		<otherwise>
		AND (B.CONFIDENTIALITY_LEVEL = #{alarmLevel} OR B.INTEGRITY_LEVEL = #{alarmLevel} OR B.AVAILABILITY_LEVEL = #{alarmLevel})
		</otherwise>
		</choose>
		</if>
		ORDER BY B.ASSET_ID DESC
		LIMIT 1
      <!--   <if test='login != null and !login.equals("")'>
        LIMIT 1
        </if> -->
  </select>

   <select id="selectWatchReportList" parameterType="map" resultType="CmmnMap">
        SELECT A.CREATE_TIME
             , B.SCHEDULE_TITLE
             , C.REPORT_TITLE
             , C.REPORT_TYPE
             , A.MANAGE_ID
         FROM  report_manage A
         INNER JOIN report_schedule B
         ON A.SCHEDULE_ID = B.SCHEDULE_ID
         INNER JOIN report_form C
         ON A.FORM_ID = C.FORM_ID
         <where>
         AND A.PRINT_YN = 0
         AND B.ACCOUNT_ID = #{accountId}
         </where>
         ORDER BY A.MANAGE_ID
         <if test='login != null and !login.equals("")'>
         LIMIT 1
         </if>
   </select>

  <select id="selectSatelliteTrans" parameterType="map" resultType="CmmnMap">

     	SELECT  *
     	FROM satellite_trans
     	LIMIT 1

  </select>

  <select id="selectCscStatus" parameterType="map" resultType="long">

     	SELECT  COUNT(1)
     	FROM csc_status
     	WHERE STATUS = 1

  </select>

  <select id="selectThreatImportanceGrade" parameterType="map" resultType="String">
      SELECT THREAT_IMPORTANCE_GRADE FROM satellite_trans LIMIT 1
  </select>

  <select id="selectTransmitData" parameterType="map" resultType="CmmnMap">
		SELECT T1.THREAT_ID
		     , T1.UNIT_ID
		     , T1.SHIP_ID
		     , UNIX_TIMESTAMP(T1.DETECTION_TIME) DETECTION_TIME
		     , T1.SRC_IP
		     , T1.DST_IP
		     , T1.SRC_PORT
		     , T1.DST_PORT
		     , T1.PROTOCOL
		     , T1.PAYLOAD_SIZE
		     , T1.FRAGMENTATION
		     , T1.FRAGMENT_ID
		     , T1.DETECTION_THREAT_NAME
		     , T1.THREAT_DETECTION_METHOD
		     , T1.THREAT_IMPORTANCE
		     , T1.PAYLOAD
		FROM threat_info T1
		<where>
		<choose>
		<when test='threatImportanceGrade != null and threatImportanceGrade.equals("9")'>
		AND THREAT_IMPORTANCE IN (1,3,5)
		</when>
		<when test='threatImportanceGrade != null and threatImportanceGrade.equals("8")'>
		AND THREAT_IMPORTANCE IN (3,5)
		</when>
		<when test='threatImportanceGrade != null and threatImportanceGrade.equals("6")'>
		AND THREAT_IMPORTANCE IN (1,5)
		</when>
		<when test='threatImportanceGrade != null and threatImportanceGrade.equals("4")'>
		AND THREAT_IMPORTANCE IN (1,3)
		</when>
		<otherwise>
		AND THREAT_IMPORTANCE = #{threatImportanceGrade}
		</otherwise>
		</choose>
		AND NOT EXISTS (SELECT T2.THREAT_ID FROM transmit_data T2 WHERE T2.THREAT_ID = T1.THREAT_ID)
		</where>
		ORDER BY T1.THREAT_ID
		LIMIT 1
  </select>

  <select id="selectSendTransmitData" parameterType="map" resultType="CmmnMap">
		SELECT A.DATA_ID
		     , B.THREAT_ID
		     , B.UNIT_ID
		     , B.SHIP_ID
		     , UNIX_TIMESTAMP(B.DETECTION_TIME) DETECTION_TIME
		     , B.SRC_IP
		     , B.DST_IP
		     , B.SRC_PORT
		     , B.DST_PORT
		     , B.PROTOCOL
		     , B.PAYLOAD_SIZE
		     , B.FRAGMENTATION
		     , B.FRAGMENT_ID
		     , B.DETECTION_THREAT_NAME
		     , B.THREAT_DETECTION_METHOD
		     , B.THREAT_IMPORTANCE
		     , B.PAYLOAD
		FROM transmit_data A
		INNER JOIN threat_info B
		ON    A.THREAT_ID = B.THREAT_ID
		AND A.SRC_FLAG = 0
		ORDER BY A.DATA_ID
		LIMIT 1
  </select>

  <select id="selectNavyTransmitData" parameterType="HashMap" resultType="CmmnMap">

        SELECT DATA_ID
             , COLLECTION_TIME
             , SRC_DATA
             , SRC_FLAG
             , SRC_BYTES
        FROM transmit_data
        <where>
        <choose>
			<when test='messageType == 1'>
			AND SRC_DATA LIKE '%asset_status%'
			</when>
			<when test='messageType == 2'>
			AND SRC_DATA LIKE '%detection_time%'
			</when>
			<otherwise>
			AND SRC_DATA LIKE '%equip_status%'
			</otherwise>
		</choose>
		AND SRC_FLAG = 0
	<!-- 	AND SRC_TIME = STR_TO_DATE(#{psTime},'%Y-%m-%d %H:%i:%s') -->
		ORDER BY DATA_ID
		LIMIT 1
        </where>


  </select>

  <update id="updateNavyTransmitDataSetStartTime" parameterType="map">
  	UPDATE TRANSMIT_DATA
  	SET    SRC_TIME = STR_TO_DATE(#{psTime},'%Y-%m-%d %H:%i:%s')
       <where>
       <choose>
		<when test='messageType == 1'>
		AND SRC_DATA LIKE '%asset_status%'
		</when>
		<when test='messageType == 2'>
		AND SRC_DATA LIKE '%detection_time%'
		</when>
		<otherwise>
		AND SRC_DATA LIKE '%equip_status%'
		</otherwise>
	</choose>
  	AND    SRC_FLAG = 0
  	LIMIT  1
  	</where>
  </update>
  <select id="selectNetworkEquipmentStatus" parameterType="map" resultType="CmmnMap">
		SELECT ID
		     , DETECTION_TIME
		     , EQUIP_STATUS_ID
		FROM network_equipment_status
		ORDER BY ID
  </select>


   <update id="insertTransmitData" parameterType="map">
         INSERT INTO transmit_data(COLLECTION_TIME
                                  , SRC_FLAG
                                  , THREAT_ID
                                  , SRC_BYTES
                                  )
					        VALUES( FROM_UNIXTIME(#{detectionTime})
					              , #{srcFlag}
					              , #{threatId}
					              , #{srcBytes}
					              )
   </update>

    <update id="updateTransmitData" parameterType="map">
         UPDATE transmit_data SET SRC_TIME = SYSDATE()
                                , SRC_FLAG  = #{srcFlag}
                                , SRC_BYTES = #{srcBytes}
         WHERE DATA_ID = #{dataId}
   </update>


   <insert id="insertAlarmCheck" parameterType="map">
        INSERT INTO alarm_check(EVENT_ID
                              , ACCOUNT_ID
                              , CONFIRM_TIME
                               )
                         VALUES(#{eventId}
                              , #{accountId}
                              , now()
                              )
   </insert>


  <update id="insertWhiteList" parameterType="map">
       INSERT INTO whitelist_policy(POLICY_NAME
                                  , SRC_IP
                                  , SRC_MASK
                                  , DST_IP
                                  , DST_MASK
                                  , SRC_START_PORT
                                  , SRC_END_PORT
                                  , DST_START_PORT
                                  , DST_END_PORT
                                  , PROTOCOL
                                  , POLICY)
					        VALUES( #{policyName}
					              , #{srcIp}
					              , #{srcMask}
					              , #{dstIp, jdbcType=VARCHAR}
					              , #{dstMask}
					              , #{srcStartPort}
					              , #{srcEndPort}
					              , #{dstStartPort}
					              , #{dstEndPort}
					              , #{protocol}
					              , #{policy} )

  </update>

  <update id="updateWhiteList" parameterType="map">
       UPDATE whitelist_policy SET SRC_IP  = #{srcIp}
					              , SRC_MASK = #{srcMask}
					              , DST_IP = #{dstIp}
					              , DST_MASK = #{dstMask}
					              , SRC_START_PORT = #{srcStartPort}
					              , SRC_END_PORT = #{srcEndPort}
					              , DST_START_PORT = #{dstStartPort}
					              , DST_END_PORT = #{dstEndPort}
					              , PROTOCOL = #{protocol}
					              , POLICY = #{policy}
       WHERE POLICY_ID = #{policyId}

  </update>

  <update id="insertWhiteListNcos" parameterType="map" useGeneratedKeys="true"  keyProperty="policyId" keyColumn="policy_id">
       INSERT INTO whitelist_policy(POLICY_NAME
                                  , SRC_IP
                                  , SRC_MASK
                                  , DST_IP
                                  , DST_MASK
                                  , SRC_START_PORT
                                  , SRC_END_PORT
                                  , DST_START_PORT
                                  , DST_END_PORT
                                  , PROTOCOL
                                  , POLICY
                                  , POLICY_INTEGRITY)
					        VALUES( #{policyName}
					              , #{srcIpEnc}
					              , #{srcMask}
					              , #{dstIpEnc, jdbcType=VARCHAR}
					              , #{dstMask}
					              , #{srcStartPort}
					              , #{srcEndPort}
					              , #{dstStartPort}
					              , #{dstEndPort}
					              , #{protocol}
					              , #{policy}
					              , #{integrity})

  </update>

  <update id="updateWhiteListNcos" parameterType="map">
       UPDATE whitelist_policy SET  SRC_IP  			= #{srcIpEnc}
					              , SRC_MASK 			= #{srcMask}
					              , DST_IP 				= #{dstIpEnc}
					              , DST_MASK 			= #{dstMask}
					              , SRC_START_PORT 		= #{srcStartPort}
					              , SRC_END_PORT 		= #{srcEndPort}
					              , DST_START_PORT 		= #{dstStartPort}
					              , DST_END_PORT 		= #{dstEndPort}
					              , PROTOCOL 			= #{protocol}
					              , POLICY 				= #{policy}
       WHERE POLICY_ID = #{policyId}

  </update>
  
  <update id="updateWhiteListIntegrity" parameterType="map">
       UPDATE whitelist_policy SET POLICY_INTEGRITY = #{integrity}
       WHERE POLICY_ID = #{policyId}

  </update>

  <delete id="deleteWhiteList" parameterType="map">
       DELETE FROM  whitelist_policy
       WHERE POLICY_ID IN
       <foreach collection="list" item="row" open="(" close=")" separator=",">
       <foreach collection="row" item="col" index="key">
         <if test='key.equals("id")'>
            #{col}
         </if>
	   </foreach>
       </foreach>
  </delete>


  <update id="insertLinkInfo" parameterType="map">
		INSERT INTO link_info(LINK_ID
		                    ,  UPPER_LINK_ID
		                    , ASSET_ID
                              )
				        VALUES( #{id}
				              , #{upperId}
				              , #{assetId} )
   </update>

   <delete id="deleteLinkInfo" parameterType="map">
       DELETE FROM  LINK_INFO

  </delete>

   <update id="updateWhitePolicyList" parameterType="map">
       DELETE FROM  whitelist_policy
       WHERE POLICY_ID IN
       <foreach collection="list" item="row" open="(" close=")" separator=",">
       <foreach collection="row" item="col" index="key">
         <if test='key.equals("id")'>
            #{col}
         </if>
	   </foreach>
       </foreach>
  </update>


  <update id="updateCyberDefense" parameterType="map">
       UPDATE cyber_defense SET CYBER_DEF_GRADE  = #{cyberDefGrade}
  </update>

   <update id="insertSatelliteTrans" parameterType="map">
       INSERT INTO satellite_trans(SETTING_TIME
                                  , SETTER
                                  , TRANS_SPEED
                                  , SYSTEM_OP_STATUS
                                  , UNIT_ID
                                  , SHIP_ID
                                  , ASSET_STATUS
                                  , THREAT_IMPORTANCE_GRADE
                                  , DETECTION_TIME
                                  , SRC_IP
                                  , DST_IP
                                  , SRC_PORT
                                  , DST_PORT
                                  , PROTOCOL
                                  , PAYLOAD_SIZE
                                  , FRAGMENTATION
                                  , FRAGMENT_ID
                                  , DETECTION_THREAT_NAME
                                  , THREAT_DETECTION_METHOD
                                  , THREAT_IMPORTANCE
                                  , PAYLOAD
                                   )
					        VALUES( SYSDATE()
					              , #{setter}
					              , #{transSpeed}
					              , #{systemOpStatus}
					              , #{unitId}
					              , #{shipId}
					              , #{assetStatus}
					              , #{threatImportanceGrade}
					              , #{detectionTime}
					              , #{srcIp}
					              , #{dstIp}
					              , #{srcPort}
					              , #{dstPort}
					              , #{protocol}
					              , #{payloadSize}
					              , #{fragmentation}
					              , #{fragmentId}
					              , #{detectionThreatName}
					              , #{threatDetectionMethod}
					              , #{threatImportance}
					              , #{payload}
					               )

  </update>

  <update id="updateSatelliteTrans" parameterType="map">
       UPDATE satellite_trans SET SETTING_TIME  = SYSDATE()
					              , SETTER = #{setter}
                                  , TRANS_SPEED  = #{transSpeed}
                                  , SYSTEM_OP_STATUS = #{systemOpStatus}
                                  , UNIT_ID = #{unitId}
                                  , SHIP_ID = #{shipId}
                                  , ASSET_STATUS = #{assetStatus}
                                  , THREAT_IMPORTANCE_GRADE = #{threatImportanceGrade}
                                  , DETECTION_TIME = #{detectionTime}
                                  , SRC_IP = #{srcIp}
                                  , DST_IP = #{dstIp}
                                  , SRC_PORT = #{srcPort}
                                  , DST_PORT = #{dstPort}
                                  , PROTOCOL = #{protocol}
                                  , PAYLOAD_SIZE = #{payloadSize}
                                  , FRAGMENTATION = #{fragmentation}
                                  , FRAGMENT_ID = #{fragmentId}
                                  , DETECTION_THREAT_NAME = #{detectionThreatName}
                                  , THREAT_DETECTION_METHOD = #{threatDetectionMethod}
                                  , THREAT_IMPORTANCE = #{threatImportance}
                                  , PAYLOAD = #{payload}
       WHERE SETTING_ID = #{settingId}

  </update>

   <update id="insertSatelliteTransNcos" parameterType="map" useGeneratedKeys="true"  keyProperty="settingId" keyColumn="setting_id">
       INSERT INTO satellite_trans(SETTING_TIME
                                  , SETTER
                                  , TRANS_SPEED
                                  , SYSTEM_OP_STATUS
                                  , UNIT_ID
                                  , SHIP_ID
                                  , ASSET_STATUS
                                  , THREAT_IMPORTANCE_GRADE
                                  , DETECTION_TIME
                                  , SRC_IP
                                  , DST_IP
                                  , SRC_PORT
                                  , DST_PORT
                                  , PROTOCOL
                                  , PAYLOAD_SIZE
                                  , FRAGMENTATION
                                  , FRAGMENT_ID
                                  , DETECTION_THREAT_NAME
                                  , THREAT_DETECTION_METHOD
                                  , THREAT_IMPORTANCE
                                  , SATELLITE_INTEGRITY
                                   )
					        VALUES( STR_TO_DATE(#{settingTime}, '%Y-%m-%d %H:%i.%s')
					              , #{setter}
					              , #{transSpeed}
					              , #{systemOpStatus}
					              , #{unitId}
					              , #{shipId}
					              , #{assetStatus}
					              , #{threatImportanceGrade}
					              , #{detectionTime}
					              , #{srcIp}
					              , #{dstIp}
					              , #{srcPort}
					              , #{dstPort}
					              , #{protocol}
					              , #{payloadSize}
					              , #{fragmentation}
					              , #{fragmentId}
					              , #{detectionThreatName}
					              , #{threatDetectionMethod}
					              , #{threatImportance}
					              , #{integrity}
					              )

  </update>

  <update id="updateSatelliteTransNcos" parameterType="map">
       UPDATE satellite_trans SET SETTING_TIME  = STR_TO_DATE(#{settingTime}, '%Y-%m-%d %H:%i.%s')
					              , SETTER = #{setter}
                                  , TRANS_SPEED  = #{transSpeed}
                                  , SYSTEM_OP_STATUS = #{systemOpStatus}
                                  , UNIT_ID = #{unitId}
                                  , SHIP_ID = #{shipId}
                                  , ASSET_STATUS = #{assetStatus}
                                  , THREAT_IMPORTANCE_GRADE = #{threatImportanceGrade}
                                  , DETECTION_TIME = #{detectionTime}
                                  , SRC_IP = #{srcIp}
                                  , DST_IP = #{dstIp}
                                  , SRC_PORT = #{srcPort}
                                  , DST_PORT = #{dstPort}
                                  , PROTOCOL = #{protocol}
                                  , PAYLOAD_SIZE = #{payloadSize}
                                  , FRAGMENTATION = #{fragmentation}
                                  , FRAGMENT_ID = #{fragmentId}
                                  , DETECTION_THREAT_NAME = #{detectionThreatName}
                                  , THREAT_DETECTION_METHOD = #{threatDetectionMethod}
                                  , THREAT_IMPORTANCE = #{threatImportance}
       WHERE SETTING_ID = #{settingId}

  </update>
  
  <update id="updateSatelliteTransIntegrity" parameterType="map">
       UPDATE satellite_trans SET SATELLITE_INTEGRITY = #{integrity}
       WHERE SETTING_ID = #{settingId}

  </update>

  <select id="selectIntegritySalt" parameterType="map" resultType="CmmnMap">
	  SELECT ACCOUNT_SETTINGS
	       , SATELLITE_TRANS
	       , THREAT_ANALYSIS
		   , USER_ACTION
		   , WHITELIST_POLICY
		   , THREAT_INFO
	  FROM INTEGRITY_SALT
	  LIMIT 1
  </select>
   <sql id="selectRecursiveAffiliation">
		WITH RECURSIVE AFFI AS(
			SELECT
				AFFILIATION_ID
				, AFFILIATION
				, IS_SHIP
				, BELONGPARENTID
			FROM AFFILIATION
			WHERE BELONGPARENTID IS NULL
			<if test='affiliationId != null and !affiliationId.equals("")'>
				AND AFFILIATION_ID=#{affiliationId}
			</if>
			UNION ALL
			SELECT
				A.AFFILIATION_ID
				, A.AFFILIATION
				, A.IS_SHIP
				, A.BELONGPARENTID
			FROM AFFILIATION A
			INNER JOIN AFFI ON A.BELONGPARENTID=AFFI.AFFILIATION_ID
			WHERE A.BELONGPARENTID IS NOT NULL
		)
   </sql>
  <select id="selectUnitInfos" parameterType="map" resultType="CmmnMap">
    <choose>
    <when test='systemId != null and !systemId.equals("")'>
    SELECT CODE CD,CODE_KR CD_NM
    FROM code_info
    WHERE MAINGROUP = 'CO'
    AND   SUBGROUP = 'UT'
    </when>
    <otherwise>
    <include refid="selectRecursiveAffiliation"></include>
	SELECT AFFILIATION_ID CD, AFFILIATION CD_NM 
	FROM AFFI WHERE BELONGPARENTID IS NULL
	ORDER BY AFFILIATION_ID ASC
    </otherwise>
    </choose>
	
  </select>
  
  <select id="selectShipInfos" parameterType="map" resultType="CmmnMap">
   <choose>
    <when test='systemId != null and !systemId.equals("")'>
       SELECT CODE CD,CODE_KR CD_NM
	    FROM code_info
	    WHERE MAINGROUP = 'CO'
	    AND   SUBGROUP = 'SH'
    </when>
    <otherwise>
    <include refid="selectRecursiveAffiliation"></include>
	SELECT AFFILIATION_ID CD , AFFILIATION CD_NM
	FROM AFFI WHERE IS_SHIP = 1
	ORDER BY AFFILIATION_ID ASC
    </otherwise>
    </choose>
  </select>

</mapper>