<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
	  xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	  layout:decorate="~{th/cmmn/layout}">
<head>
<title>함정메인화면</title>
</head>
<th:block layout:fragment="content">
<div class="container-wide">
	<div class="container">
		<div class="grid-row">
			<div class="item-box col-2">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_11_01"></span><strong>사이버 방호 태세</strong></h4>
					<div class="items dashtop"> 
						<!-- item contnets // -->
						<div class="defenseStep ac">
							<ul>
								<li><span style="cursor:pointer;">Ⅰ</span></li>
								<li><span style="cursor:pointer;">Ⅱ</span></li>
								<li><span style="cursor:pointer;">Ⅲ</span></li>
								<li><span style="cursor:pointer;">Ⅳ</span></li>
								<li><span style="cursor:pointer;">Ⅴ</span></li>
							</ul>
						</div>
						<!-- // item contnets --> 
					</div>
				</div>
			</div>
			<div class="item-box col-2">
				<div class="inner"><a href="javascript:pageFunc('/assetDisp');">
					<h4 class="item-title"><span class="iconWrapB icon_11_02"></span><strong>자산 이상 탐지</strong></h4></a>
					<a href="javascript:pageFunc('/assetDisp');">
						<div class="items dashtop"> <!-- item contnets // --><div class="dataNum ac assetDetect"></div><!-- // item contnets --> </div>
					</a>
				</div>
			</div>
			<div class="item-box col-2">				
					<div class="inner">
						<h4 class="item-title">
							<a href="javascript:pageFunc('/threatDisp');">
								<span class="iconWrapB icon_11_03"></span><strong>화이트리스트 기반 탐지</strong></a>
						<a href="javascript:popWhiteList();" class="iconWrapB setting icon_setting">설정</a></h4>
						<a href="javascript:pageFunc('/threatDisp');">
							<div class="items dashtop"> <!-- item contnets // --><div class="dataNum ac whiteDetect"></div><!-- // item contnets --> </div>
						</a>
					</div>				
			</div>
			<div class="item-box col-2">
				<div class="inner">
					<a href="javascript:pageFunc('/threatDisp');">
						<h4 class="item-title"><span class="iconWrapB icon_11_04"></span><strong>AI기반 위협 탐지</strong></a></h4>
					<a href="javascript:pageFunc('/threatDisp');">
						<div class="items dashtop"> <!-- item contnets // --><div class="dataNum ac aiDetect"></div><!-- // item contnets --> </div></a>					
				</div>
			</div>
			<div class="item-box col-2">
				<div class="inner">
					<a href="javascript:pageFunc('/threatDisp');">
						<h4 class="item-title"><span class="iconWrapB icon_11_05"></span><strong>시그니처 기반 위협 탐지</strong></h4></a>
					<a href="javascript:pageFunc('/threatDisp');">
						<div class="items dashtop"> <!-- item contnets // --><div class="dataNum ac signatureDetect"></div><!-- // item contnets --> </div></a>
				</div>
			</div>
			<div class="item-box col-2">
				<div class="inner">
					<h4 class="item-title"><a href="javascript:pageFunc('/threatDisp');"><span class="iconWrapB icon_11_06"></span><strong>위협 중요도</strong></h4>
					<div class="items dashtop"> <a href="javascript:pageFunc('/threatDisp');">
						<!-- item contnets // -->
						<div class="threatImportance ac">
							<ul>
								<li class="high"><span>상</span><strong></strong></li>
								<li class="middle"><span>중</span><strong></strong></li>
								<li class="low"><span>하</span><strong></strong></li>
							</ul>
						</div></a>
						<!-- // item contnets -->
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-4">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_11_07"></span><strong>위협 종류별 발생 현황</strong></h4>
				     <div class="items"> 
					<span class="imgWrap"><canvas id="lineChart1" width="528" height="250"></canvas></span>
					</div>
				</div>
			</div>
			<div class="item-box col-4">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_11_08"></span><strong>자산 종류별 발생 현황</strong></h4>
					<div class="items"> <!-- item contnets // -->
					<span class="imgWrap"><canvas id="lineChart2" width="528" height="250"></canvas></span><!-- // item contnets --> 
					</div>
				</div>
			</div>
			<div class="item-box col-4">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_11_09"></span><strong>위성 데이터 전송 속도</strong>
					<a href="javascript:popDataTransConfig();" class="iconWrapB setting icon_setting">설정</a></h4>
					<div class="items"> <!-- item contnets // -->
					<span class="imgWrap"><canvas id="lineChart3" width="528" height="250"></canvas></span><!-- // item contnets --> 
					</div>
				</div>
			</div>
		</div>
	    <div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<div class="items"  style="float:right">
						<div class="schwrap">
								<button class="btn medium darkblue initBtn">
									<span class="iconBtn icon_reset"></span><strong>초기화</strong>
								</button>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="grid-row">
			<div class="item-box col-12">
				<div class="inner">
					<h4 class="item-title"><span class="iconWrapB icon_11_10"></span><strong>위협 발생 목록</strong></h4>
					<div class="items" style="height:283px; overflow:hidden"> 
						<div class="tablewrap">
							<table>
								<thead class="tHead">
								</thead>
								<tbody class="tBody">
								</tbody>
							</table>
						</div>
						<div class="page_wrap">
							<div class="page_nation"> 
								<input type="hidden" name="rowPerPage" class="rowPerPage" value="4">
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script th:inline="javascript"> 
	window.addEventListener('DOMContentLoaded', () => {
		drawDataTrans();
		ncos.intervalFunc  = setInterval(drawDataTrans, ncos.intervalTrans);//1초
		ncos.schMode = 'auto';
		init();
		initWhiteList();
		//ncos.intervalFunc  = setInterval(searchFunc, ncos.interval);//5초
		document.querySelector('.initBtn').addEventListener('click',e => {
			e.preventDefault();
			/*
			ncos.initBtn = true;
			searchFunc();
			ncos.intervalFunc = setInterval(searchFunc, ncos.interval);//5초
			*/
			clearInterval(ncos.intervalFunc);
	    });	    
		   
	});
	let lineChart1 = null;
    let lineChart2 = null;
    let lineChart3 = null;
    let legendOption = {usePointStyle: true,
          	           color: 'black',
          	           padding : 30,   
                       font: {size: 12,}
	};
    //
    const init = () => {
    	uiMode = gfn_getStorage(ncos.uiMode);
    	let tablewrap = document.querySelector('.tablewrap');
        if(uiMode != 'white'){
        	legendOption.color = 'white';
        }
        const headColumns = [{data_id:"id",label:"id",width:"0px"}
		        ,{data_id:"detectionTime",label:"탐지시간" ,data_dateFrmt:"yy-mm-dd hh:mi:ss"}		        
		        ,{data_id:"srcIp",label:"송신IP"}
		        ,{data_id:"dstIp",label:"수신IP"}
		        ,{data_id:"srcPort",label:"송신Port"}
		        ,{data_id:"dstPort",label:"수신Port"}
		        ,{data_id:"threatDetectionMethod",label:"탐지방식", data_grpCd:"THTY"}
		        ,{data_id:"detectionThreatName",label:"탐지 위험명"}
		        ,{data_id:"analysisResult",label:"정오탐판정",data_grpCd:"THRES"}
		        ,{data_id:"threatImportance",label: "위협중요도",data_grpCd:"THIM", data_class:"threat"}
		        ,{data_id:"detailBtn",label: "상세보기", data_cellType:"tdCCell" , data_btnNm:"상세보기"}
		       ];
		gridInit(tablewrap,headColumns);
		pageInit(document.querySelector(".page_nation"),searchFunc,page.rowPerPage);
		searchFunc();

    	
    }
    
    const searchFunc = (invoker) => {
    	pageSearch("/navyIntro",document.querySelector(".tablewrap"),document.querySelector(".page_nation"),invoker,searchFunc,searchAfterFunc);
		/*
   		gfn_asyncJsonCall('/navyIntro','GET').then((data) => {
    		return data['appendData'];
    	}).then((appendData) => {
    		searchAfterFunc(appendData);
    	}); 
    	*/
    }
    
    const searchAfterFunc = (appendData) => {
    	//console.log("appendData:",appendData);
    	setStatus(appendData.statusInfo);
    	drawLineChart1(appendData.threatStatusList);
    	drawLineChart2(appendData.assetStatusList);
    }
    
    const setStatus = (data) => {
    	//console.log("setStatus data:",data.cyberDefGrade);
    	let defenseStep = document.querySelector('.defenseStep');
    	let lis = defenseStep.querySelectorAll('li');  //class="step"
        lis.forEach((li,index) => {
        	let span = li.querySelector('span');
        	if((index+1) === parseInt(data.cyberDefGrade)){
        		if(!span.classList.contains('step')){
        			span.classList.add('step');
        		}
        	}
        	else{
        		if(span.classList.contains('step')){
        			span.classList.remove('step');
        		}
        	}
        });
    	
    	let assetDetect = document.querySelector('.assetDetect');
    	assetDetect.innerHTML = '';
    	assetDetect.append(data.unstableAsset+'/'+data.totAsset);
    	let whiteDetect = document.querySelector('.whiteDetect');
    	whiteDetect.innerHTML = '';
    	whiteDetect.append(data.whiteDetect);
    	let aiDetect = document.querySelector('.aiDetect');
    	aiDetect.innerHTML = '';
    	aiDetect.append(data.aiDetect);
    	let signatureDetect = document.querySelector('.signatureDetect');
    	signatureDetect.innerHTML = '';
    	signatureDetect.append(data.signatureDetect);
    	let threatImportance = document.querySelector('.threatImportance');
    	let threatLis = threatImportance.querySelectorAll('li');
    	threatLis.forEach((li,index) => {
    		let strong = li.querySelector('strong');
    		strong.innerHTML = '';
    		if(li.classList.contains('high')){
    			strong.append(data.highPrior);
    		}
    		else if(li.classList.contains('middle')){
    			strong.append(data.middlePrior);
    		}
            else if(li.classList.contains('low')){
            	strong.append(data.lowPrior);
    		}
    	});
    }
    
    const drawLineChart1 = (chartData) => {
    	//console.log("drawLineChart1 chartData:",chartData);
    	let lineLabels = new Array();
    	let dataH = new Array();
    	let dataA = new Array();
    	let dataS = new Array();
    	chartData.forEach((chartItem,index) => {
    		if(chartItem.threat === 'H'){
    			lineLabels.push(chartItem.hm);
    			dataH.push(chartItem.cnt);
    	    }
    		else if(chartItem.threat === 'A'){
    			dataA.push(chartItem.cnt);
    		}
            else if(chartItem.threat === 'S'){
            	dataS.push(chartItem.cnt);
    		}
    	});
    	const lineData = {labels: lineLabels,
    			          datasets: [{ label: ' 화이트리스',
    			                        data: dataH,//[65, 59, 80, 81, 56, 55, 40],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: 'rgb(75, 192, 192)',
    			                        backgroundColor: 'rgb(75, 192, 192)',
    			                        tension: 0.1
    			                    },
    			                    { label: ' AI',
    			                        data: dataA,//'[35, 45, 65, 34, 53, 45, 57],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: 'rgb(75, 145, 78)',
    			                        backgroundColor: 'rgb(75, 145, 78)',
    			                        tension: 0.1
    			                    },
    			                    { label: ' 시그니처',
    			                        data: dataS,//[45, 52, 60, 71, 38, 23, 34],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: 'rgb(75, 89, 192)',
    			                        backgroundColor: 'rgb(75, 89, 192)',
    			                        //pointBorderColor: 'rgb(75, 89, 192)',
    			                        tension: 0.1
    			                    }
    			                    ]
    	                 };
    	
    	const config = { type: 'line',
    			         data: lineData,
    			         options: { responsive: true,
    			        	        animation: {
			        	                duration: 0
			        	            },
    			        	        scales: {
    			        	                 x: {
    			        	                	 ticks: {
    			        	                         color: 'black',
    			        	                	 },
    			        	                	
    			        	                 },
    			        	                 y: {
    			        	                	 ticks: {
    			        	                         color: 'black',
    			        	                     },
    			        	                     grid: {
    			        	                    	 color : 'rgb(90, 90, 90)',
    			        	                         display: true,
    			        	                         //drawOnChartArea: true,
    			        	                         //drawTicks: true,
    			        	                     }
    			        	                 }
    			        	             },
    			        	             
	    			        	    plugins: {legend: {
	    	       			    		      position: 'bottom',
	    	       			                  display: true,
	    	       			                  labels: legendOption/*{
	    	       			                	  usePointStyle: true,
	    	       			                	  color: legendColor,
	    	       			                	  padding : 30,
	    	       			                      font: {
	                                                size: 12,
	    	       		                          }
	    	       			                	// fill : true
	    	       			                  }*/
	    	       			           }
	    	       			      }
    			         },
    			        };
    	if(uiMode != 'white'){
    		config.options.scales.x.ticks.color = 'white';
        	config.options.scales.y.ticks.color = 'white';
        }
    	if(lineChart1!=null){
    		lineChart1.destroy();
	    }
    	lineChart1 = new Chart(document.getElementById('lineChart1').getContext("2d"),config);	  

    }
    
    const drawLineChart2 = (chartData) => {
    	let lineLabels = new Array();
    	let dataS = new Array();
    	let dataW = new Array();
    	let dataF = new Array();
    	let dataC = new Array();
    	chartData.forEach((chartItem,index) => {
    		if(chartItem.asset == '1'){
    			lineLabels.push(chartItem.hm);
    			dataS.push(chartItem.cnt);
    	    }
    		else if(chartItem.asset == '2'){
    			dataW.push(chartItem.cnt);
    		}
            else if(chartItem.asset == '3'){
            	dataF.push(chartItem.cnt);
    		}
    		 else if(chartItem.asset == '4'){
            	dataC.push(chartItem.cnt);
    		}
    	});

    	const lineData = {labels: lineLabels,
    			          datasets: [{ label: gfn_getCodeVal('ASLC','1'), //' 서버     ',
    			                        data: dataS,//[65, 59, 80, 81, 56, 55, 40],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: '#80e080',
    			                        backgroundColor: '#80e080',
    			                        tension: 0.1
    			                    },
    			                    { label: gfn_getCodeVal('ASLC','2'), //' 스위치     ',
    			                        data: dataW,//[35, 45, 65, 34, 53, 45, 57],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: '#4fc3f7',
    			                        backgroundColor: '#4fc3f7',
    			                        tension: 0.1
    			                    },
    			                    { label: gfn_getCodeVal('ASLC','3'), //' 네트워크장비     ',
    			                        data: dataF,//[45, 52, 60, 71, 38, 23, 34],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: '#9575cd',
    			                        backgroundColor: '#9575cd',
    			                        //pointBorderColor: 'rgb(75, 89, 192)',
    			                        tension: 0.1
    			                    },
    			                    { label: gfn_getCodeVal('ASLC','4'), //' 보안장비     ',
    			                        data: dataC,//[45, 52, 60, 71, 38, 23, 34],
    			                        fill: false,
    			                        pointStyle: 'circle',
    			                        pointRadius: 4,
    			                        borderColor: '#c71585',
    			                        backgroundColor: '#c71585',
    			                        //pointBorderColor: 'rgb(75, 89, 192)',
    			                        tension: 0.1
    			                    }]
    	                 };
    	
    	const config = { type: 'line',
    			         data: lineData,
    			         options: { responsive: true,
		    			        	animation: {
					        	         duration: 0
					        	    },
    			        	        scales: {
    			        	                 x: {
    			        	                	 ticks: {
    			        	                         color: 'black',
    			        	                	 },
    			        	                	
    			        	                 },
    			        	                 y: {
    			        	                	 ticks: {
    			        	                         color: 'black',
    			        	                     },
    			        	                     grid: {
    			        	                    	 color : 'rgb(90, 90, 90)',
    			        	                         display: true,
    			        	                         //drawOnChartArea: true,
    			        	                         //drawTicks: true,
    			        	                     }
    			        	                 }
    			        	             },
    			        	             
	    			        	    plugins: {legend: {
	    	       			    		      position: 'bottom',
	    	       			                  display: true,
	    	       			                  labels: legendOption
	    	       			                 }
	    	       			      }
    			         },
    			        };
    	if(uiMode != 'white'){
    		config.options.scales.x.ticks.color = 'white';
        	config.options.scales.y.ticks.color = 'white';
        }
    	if(lineChart2!=null){
    		lineChart2.destroy();
	    }
    	lineChart2 = new Chart(document.getElementById('lineChart2').getContext("2d"),config);	  

    }
    
    const drawDataTrans = (chartData) => {
    	let lineLabels = new Array();
    	let transData = new Array();
    	let totTransData = new Array();
    	gfn_asyncJsonCall('/dataTrans','GET').then((data) => {
   		    console.log("data:",data);
 			let date = new Date(data.curTime);
 			//date.setSeconds(date.getSeconds() -60);
 			date.setSeconds(date.getSeconds());
 		    lineLabels.push(gfn_dateFrmt(date,'hh:mi:ss'));
 		    transData.push(0);
 		    totTransData.push(0);
 			for (var idx = 0; idx < 60; idx++){
 				//date.setSeconds(date.getSeconds() +1);
 				date.setSeconds(date.getSeconds() -1);
 				lineLabels.push(gfn_dateFrmt(date,'hh:mi:ss'));
 				transData.push(0);
 				totTransData.push(0);
 			}
 			let totSrcBits = 0;
 			if(null !=  data.totSrcBytes){
				 totSrcBits = parseInt(data.totSrcBytes)*8;
			 }
 			
 			console.log("totSrcBits:",totSrcBits);
 			let list = data['list'];
 			let sumSrcBits = 0;
 			if(list != null && list != undefined){
	 			for(let key in list){
	 			    let sec = parseInt(list[key].sec);
	 				let srcBits = parseInt(list[key].srcBytes)*8;
	 				sumSrcBits += srcBits;
	 				//transData[60-parseInt(key)] = srcBits;
	 				//transData[key] = srcBits;
	 				if(totSrcBits > 0){
						 if(totSrcBits - sumSrcBits < 0){
							  totTransData[sec] = 0;
						 }
						 else{
							  totTransData[sec] = totSrcBits - sumSrcBits;
						 }
						 
						
						// totTransData[60-parseInt(key)] = totSrcBits - sumSrcBits;
					}
					else{
						totTransData[sec] = 0
						 //totTransData[60-parseInt(key)] = 0;
					}
	 				
	 				transData[sec] = srcBits;
	 				
	 			}
 			}
 			
 			console.log("transData:",transData);
 			console.log("totTransData:",totTransData);
 			
 			
 			
	 		
	 		let lineDataSets = new Array();
		    let lineDataSet = {label: '송신',
				                data: transData,
				             fill: true,
				             pointStyle: 'circle',
				             pointRadius: 1,
				             borderColor: 'rgb(120, 120, 250)',
				             backgroundColor: 'rgb(120, 120, 205)',
				             tension: 0.1	
		    };
		    
		    let lineDataSetTot = {label: '버퍼',
				                  data: totTransData,
				                  fill: true,
				                  pointStyle: 'circle',
				                  pointRadius: 1,
				                  borderColor: 'rgb(169, 139, 129)',
				                  backgroundColor: 'rgb(225, 183, 113)',
				                  tension: 0.8
		    };
		    if(activeProfile === 'land' || activeProfile === 'hmmLand' || activeProfile === 'lnsystemLand' || activeProfile === 'lnsystemHmmLand'){
		    	lineDataSet.label = '수신';
		    	lineDataSet.borderColor = 'rgb(169, 139, 129)';
		    	lineDataSet.backgroundColor = 'rgb(225, 183, 113)';
		    }
		    lineDataSets.push(lineDataSet);
		      
		    if(activeProfile === 'navy' || activeProfile === 'lnsystemNavy'){
				lineDataSets.push(lineDataSetTot);
			}
		    
		    
		  

	    	const lineData = {labels: lineLabels,
	    			          datasets: lineDataSets,
	    	                 };
	    	
	    	const config = { type: 'line',
	    			         data: lineData,
	    			         options: { responsive: true,
			    			        	animation: {
						        	         duration: 0
						        	    },
	    			        	        scales: {
											     
	    			        	                 x: {
	    			        	                	 ticks: {
	    			        	                		callback: function(val, index) {
	    			        	                	            // Hide every 2nd tick label
	    			        	                	            return index % 6 === 0 ? this.getLabelForValue(val) : '';
	    			        	                	     },
	    			        	                         color: 'black',
	    			        	                	 },
	    			        	                	
	    			        	                 },
	    			        	                 
	    			        	                 /*
	    			        	                 yAxes: [{
															ticks: {
																 color: 'black',
																 min : 0,
																 max : 1000,
						
															},
														}
														],
														*/
	    			        	                y: {
	    			        	                	 ticks: {
	    			        	                         color: 'black',
	    			        	                         min : 0,
						                                 max : 10000,
	    			        	                     },
	    			        	                     grid: {
	    			        	                    	 color : 'rgb(90, 90, 90)',
	    			        	                         display: true,
	    			        	                         //drawOnChartArea: true,
	    			        	                         //drawTicks: true,
	    			        	                     }
	    			        	                 }
	    			        	             },
	    			        	             
		    			        	    plugins: {legend: {
		    	       			    		      position: 'bottom',
		    	       			                  display: true,
		    	       			                  labels: legendOption
		    	       			           }
		    	       			      }
	    			         },
	    			        };
	    	if(uiMode != 'white'){
	    		config.options.scales.x.ticks.color = 'white';
	        	config.options.scales.y.ticks.color = 'white';
	        }
	    	if(lineChart3!=null){
	    		lineChart3.destroy();
		    }
	    	lineChart3 = new Chart(document.getElementById('lineChart3').getContext("2d"),config);	 

	    });
    }
    
    const detailFunc = (data) => {
    	setThreatAnalysis(data);
    }
    
    const popWhiteList = (data) => {
    	searchWhiteList();
    }

    //gfn_asyncJsonCall('/saveUserAccount','POST',params,requiredParams,regUserPop,trncAfterFunc);
    document.querySelector('.defenseStep').querySelectorAll('li').forEach((li,index) => {
    	li.addEventListener('click',(e) => {
    		let param = {cyberDefGrade: index+1};
    		gfn_asyncJsonCall('/saveCyberDefense','POST',param,null,null).then((data)=>{
    			if(data["success_msg"] != undefined){
    				document.querySelector('.defenseStep').querySelectorAll('span').forEach((span) => {
    	    			if(span.classList.contains('step')){
    	    				span.classList.remove('step');
    	    				return false;
    	    			}
    	    		});	
    	    		li.querySelector('span').classList.add('step');
    			}
    		});
    	});
    });
    

</script>
</th:block>
</html>
